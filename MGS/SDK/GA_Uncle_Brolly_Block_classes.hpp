#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Uncle_Brolly_Block

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Uncle_Brolly_Block.GA_Uncle_Brolly_Block_C
// 0x0148 (0x0B78 - 0x0A30)
class UGA_Uncle_Brolly_Block_C : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A30(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortAbilitySystemComponent*            Pawn_AbilitySystem;                                // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A40(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_Blocking;                                       // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ActorClass_BlockCollision;                         // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockStartTime;                                    // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinBlockDuration;                                  // 0x0A5C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockCollisionActorAttachZOffset;                  // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockCollisionActorAttachXOffset;                  // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           T_DodgeEvent;                                      // 0x0A68(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           EndAbilityTimerHandle;                             // 0x0A70(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HasBlockCollision;                                 // 0x0A78(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasBlockCollisionHit;                              // 0x0A79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          BlockInputReleased;                                // 0x0A7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A7B[0x1];                                      // 0x0A7B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectHandle            BlockingEffectHandle;                              // 0x0A7C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AB_UncleBrolly_C*                       BP_UncleWeapon;                                    // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Uncle_Brolly_Block_Collision_C*      BP_UncleBlockingActor;                             // 0x0A90(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_FloatTag;                                       // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 GE_FloatFallingTag;                                // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FloatResourceDepleted;                             // 0x0AA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA9[0x3];                                      // 0x0AA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FloatingMaxAcceleration;                           // 0x0AAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingMaxLateralSpeed;                           // 0x0AB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingLateralFriction;                           // 0x0AB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatTimerInterval;                                // 0x0AB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatVerticalImpulse;                              // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingDuration;                                  // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FloatingGravityScalar;                             // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseFloatDuration;                                 // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinFloatDuration;                                  // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_FloatFallingStart;                              // 0x0AD0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                FallingImpulse;                                    // 0x0AD8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AE4[0x4];                                      // 0x0AE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           H_FloatTimer;                                      // 0x0AE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            H_FloatTag;                                        // 0x0AF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            H_FallingTag;                                      // 0x0AF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                FloatTask;                                         // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_OpenUncle;                                      // 0x0B08(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_CloseUncle;                                     // 0x0B10(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         FloatTimeWarningThreshold;                         // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1C[0x4];                                      // 0x0B1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GT_FloatAbility;                                   // 0x0B20(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGameplayTag                           GT_FloatingAction;                                 // 0x0B40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GT_FallingAction;                                  // 0x0B48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         DashMinHoldTime;                                   // 0x0B50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          EndedByDodge;                                      // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_GA_Uncle_Brolly_Block(int32 EntryPoint);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnAbilityInputReleased();
	void CheckShouldEndAbility();
	void TriggerDash();
	void K2_ActivateAbility();
	void BindDash();
	void ActivateFloat();
	void Added_B4FD3AAE47D662CFD1C6C6814831FCAA();
	void OnSync_53D666E34CF1A124BC9B20A69E9CD5AD();
	void EventReceived_649012DE4C5ACF44569293894A96AFD2(const struct FGameplayEventData& Payload);
	void Removed_4AA6FA984D57405A70F4AF95E61AE04C();
	void Added_7B839F2F4FB71A01B782D9B9D0D92607();
	void Added_119C99CD4B7288CA0C23B5B3F4C728B6();
	void Added_5D87F495442E33847EB0E9A15A7F6216();
	void EventReceived_D93809AD482D8DB8DECD5BBB2CD338B9(const struct FGameplayEventData& Payload);
	void EventReceived_F0D49DEF4CABD7D2970EE482332B97F3(const struct FGameplayEventData& Payload);
	void EventReceived_B232DF744F9B5B3563AFBBAA89EC49C0(const struct FGameplayEventData& Payload);
	void Added_186AA6D046EAC0B3175F1FB97B4CC1EB();
	void Added_9FD32A6A493FB3608E1AAD90A143F196();
	void Added_7E78D0CD41CB88E53D20C29554BFA2FE();
	void Added_2C8AD2D14C7DF39B64C3C7A0ED0BD07D();
	void Added_0B139ADF4EE02BC4BCEA24B642CF54D3();
	void InitAbility();
	void EnableBlockingCollision();
	void EndAbilityCleanup();
	void CachePawnAndAbilitySystem();
	void HandleWeaponToggles(bool Hide);
	void ResetFloatingParams();
	bool CheckShouldFloat();
	void CheckMinInputHeldDuration(bool* Success, float* MinDurationRemainder);
	void OnRep_ChargeTime();
	bool CheckHasFloatingTags();
	void HideOrShowReticleStatus();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Uncle_Brolly_Block_C">();
	}
	static class UGA_Uncle_Brolly_Block_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Uncle_Brolly_Block_C>();
	}
};
static_assert(alignof(UGA_Uncle_Brolly_Block_C) == 0x000008, "Wrong alignment on UGA_Uncle_Brolly_Block_C");
static_assert(sizeof(UGA_Uncle_Brolly_Block_C) == 0x000B78, "Wrong size on UGA_Uncle_Brolly_Block_C");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, UberGraphFrame) == 0x000A30, "Member 'UGA_Uncle_Brolly_Block_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, Pawn_AbilitySystem) == 0x000A38, "Member 'UGA_Uncle_Brolly_Block_C::Pawn_AbilitySystem' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, PlayerPawn) == 0x000A40, "Member 'UGA_Uncle_Brolly_Block_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GE_Blocking) == 0x000A48, "Member 'UGA_Uncle_Brolly_Block_C::GE_Blocking' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, ActorClass_BlockCollision) == 0x000A50, "Member 'UGA_Uncle_Brolly_Block_C::ActorClass_BlockCollision' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BlockStartTime) == 0x000A58, "Member 'UGA_Uncle_Brolly_Block_C::BlockStartTime' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, MinBlockDuration) == 0x000A5C, "Member 'UGA_Uncle_Brolly_Block_C::MinBlockDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BlockCollisionActorAttachZOffset) == 0x000A60, "Member 'UGA_Uncle_Brolly_Block_C::BlockCollisionActorAttachZOffset' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BlockCollisionActorAttachXOffset) == 0x000A64, "Member 'UGA_Uncle_Brolly_Block_C::BlockCollisionActorAttachXOffset' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, T_DodgeEvent) == 0x000A68, "Member 'UGA_Uncle_Brolly_Block_C::T_DodgeEvent' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, EndAbilityTimerHandle) == 0x000A70, "Member 'UGA_Uncle_Brolly_Block_C::EndAbilityTimerHandle' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, HasBlockCollision) == 0x000A78, "Member 'UGA_Uncle_Brolly_Block_C::HasBlockCollision' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, WasBlockCollisionHit) == 0x000A79, "Member 'UGA_Uncle_Brolly_Block_C::WasBlockCollisionHit' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BlockInputReleased) == 0x000A7A, "Member 'UGA_Uncle_Brolly_Block_C::BlockInputReleased' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BlockingEffectHandle) == 0x000A7C, "Member 'UGA_Uncle_Brolly_Block_C::BlockingEffectHandle' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BP_UncleWeapon) == 0x000A88, "Member 'UGA_Uncle_Brolly_Block_C::BP_UncleWeapon' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BP_UncleBlockingActor) == 0x000A90, "Member 'UGA_Uncle_Brolly_Block_C::BP_UncleBlockingActor' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GE_FloatTag) == 0x000A98, "Member 'UGA_Uncle_Brolly_Block_C::GE_FloatTag' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GE_FloatFallingTag) == 0x000AA0, "Member 'UGA_Uncle_Brolly_Block_C::GE_FloatFallingTag' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatResourceDepleted) == 0x000AA8, "Member 'UGA_Uncle_Brolly_Block_C::FloatResourceDepleted' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatingMaxAcceleration) == 0x000AAC, "Member 'UGA_Uncle_Brolly_Block_C::FloatingMaxAcceleration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatingMaxLateralSpeed) == 0x000AB0, "Member 'UGA_Uncle_Brolly_Block_C::FloatingMaxLateralSpeed' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatingLateralFriction) == 0x000AB4, "Member 'UGA_Uncle_Brolly_Block_C::FloatingLateralFriction' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatTimerInterval) == 0x000AB8, "Member 'UGA_Uncle_Brolly_Block_C::FloatTimerInterval' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatVerticalImpulse) == 0x000ABC, "Member 'UGA_Uncle_Brolly_Block_C::FloatVerticalImpulse' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatingDuration) == 0x000AC0, "Member 'UGA_Uncle_Brolly_Block_C::FloatingDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatingGravityScalar) == 0x000AC4, "Member 'UGA_Uncle_Brolly_Block_C::FloatingGravityScalar' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, BaseFloatDuration) == 0x000AC8, "Member 'UGA_Uncle_Brolly_Block_C::BaseFloatDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, MinFloatDuration) == 0x000ACC, "Member 'UGA_Uncle_Brolly_Block_C::MinFloatDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GC_FloatFallingStart) == 0x000AD0, "Member 'UGA_Uncle_Brolly_Block_C::GC_FloatFallingStart' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FallingImpulse) == 0x000AD8, "Member 'UGA_Uncle_Brolly_Block_C::FallingImpulse' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, H_FloatTimer) == 0x000AE8, "Member 'UGA_Uncle_Brolly_Block_C::H_FloatTimer' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, H_FloatTag) == 0x000AF0, "Member 'UGA_Uncle_Brolly_Block_C::H_FloatTag' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, H_FallingTag) == 0x000AF8, "Member 'UGA_Uncle_Brolly_Block_C::H_FallingTag' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatTask) == 0x000B00, "Member 'UGA_Uncle_Brolly_Block_C::FloatTask' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GC_OpenUncle) == 0x000B08, "Member 'UGA_Uncle_Brolly_Block_C::GC_OpenUncle' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GC_CloseUncle) == 0x000B10, "Member 'UGA_Uncle_Brolly_Block_C::GC_CloseUncle' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, FloatTimeWarningThreshold) == 0x000B18, "Member 'UGA_Uncle_Brolly_Block_C::FloatTimeWarningThreshold' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GT_FloatAbility) == 0x000B20, "Member 'UGA_Uncle_Brolly_Block_C::GT_FloatAbility' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GT_FloatingAction) == 0x000B40, "Member 'UGA_Uncle_Brolly_Block_C::GT_FloatingAction' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, GT_FallingAction) == 0x000B48, "Member 'UGA_Uncle_Brolly_Block_C::GT_FallingAction' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, DashMinHoldTime) == 0x000B50, "Member 'UGA_Uncle_Brolly_Block_C::DashMinHoldTime' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Block_C, EndedByDodge) == 0x000B70, "Member 'UGA_Uncle_Brolly_Block_C::EndedByDodge' has a wrong offset!");

}

