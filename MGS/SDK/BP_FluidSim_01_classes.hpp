#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluidSim_01

#include "Basic.hpp"

#include "FluidBoundary_structs.hpp"
#include "FluidForceDynamicPerInstanceData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FluidForceImpulsePerInstanceData_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluidSim_01.BP_FluidSim_01_C
// 0x0228 (0x0440 - 0x0218)
class ABP_FluidSim_01_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SimMID;                                            // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               RenderNormalsMID;                                  // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DisplayMID;                                        // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DisplayBottomMID;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CrossSectionMID;                                   // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTextureRenderTarget2D*>         RTs;                                               // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class UMaterialInterface*                     Display_Material;                                  // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Virtual_FPS;                                       // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Passes;                                            // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeAccumulator;                                   // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FixedStep;                                         // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled;                                           // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Fluid_Size;                                        // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Resolution;                                        // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFluidBoundary                                Boundary_Condition;                                // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_285[0x3];                                      // 0x0285(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Travel_Speed;                                      // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damping;                                           // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 NormalRT;                                          // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CutPos;                                            // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevLoc;                                           // 0x02A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrecLoc2;                                          // 0x02B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevOffset;                                        // 0x02BC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevOffset2;                                       // 0x02C8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GridCenter;                                        // 0x02D4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 TempRT;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 ForcesRT;                                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ApplyForces;                                       // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ALandscapeWaterInfo_C*                  LandscapeWaterInfo;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Renders_Per_Frame;                                 // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Cross_Section;                                // 0x0304(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Perf_Test_Mode;                                    // 0x0305(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_306[0x2];                                      // 0x0306(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 PerfRT;                                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFluidForceImpulsePerInstanceData> ImpulseForces;                                     // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference)
	TMap<class UActorComponent*, struct FFluidForceDynamicPerInstanceData> DynamicForces;                                     // 0x0320(0x0050)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference)
	TMap<class UMaterialInterface*, class UMaterialInstanceDynamic*> ForceParentAndMIDMap;                              // 0x0370(0x0050)(Edit, BlueprintVisible, ZeroConstructor)
	bool                                          Show_Simulation_Mesh;                              // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   Fluid_Display_Mesh;                                // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cross_Section_Mesh;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FluidSizeSquared;                                  // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LocalPawnRef;                                      // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug_Text;                                        // 0x03DD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3DE[0x2];                                      // 0x03DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Pawn_Check_Every_N_Frames;                         // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UActorComponent*, struct FFluidForceDynamicPerInstanceData> ProjectileForces;                                  // 0x03E8(0x0050)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference)
	bool                                          Follow_Player_;                                    // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_FluidSim_01(int32 EntryPoint);
	void FluidGridDebug();
	void Release_RTs();
	void ReCheckScalability();
	void Allocate_RTs();
	void Clear_RTs();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Cycle_Render_Targets(class UTextureRenderTarget2D** Current_Target);
	void Convert_Force_Position(const struct FVector& Force_Location, float Sine_Bob, struct FVector* UV_Location);
	void SetupDisplayMIDs();
	void SetupSimMIDs();
	void GridMovement();
	void Get_Force_MID(class UMaterialInterface*& Parent, class UMaterialInstanceDynamic** Mid);
	void Get_LandscapeWaterInfo();
	void Apply_Fluid_Force_Impulse(const struct FFluidForceImpulse& Impulse_Settings);
	void Update_Impulse_Lifetimes();
	void Draw_Impulse_Force(class UCanvas* Canvas, const struct FVector2D& Canvas_Size, const struct FFluidForceImpulsePerInstanceData& Impulse_Settings);
	void Update_Dynamic_Forces();
	void Register_Dynamic_Force(const struct FFluidForceDynamic& Dynamic_Fluid_Force, class USceneComponent* Tracked_Component, float WaterLevel);
	void Remove_Dynamic_Force(class UActorComponent* Component);
	void Draw_Dynamic_Force(class UCanvas*& Canvas, struct FVector2D& Canvas_Size, struct FFluidForceDynamicPerInstanceData& Dynamic_Force_Settings);
	void GetLocalPawn(class APawn** Pawn);
	void Set_Waterbody_MID_Params();
	void Validate_RTs(bool* RTs_All_Valid);
	void GetPlayerPawnForces();
	void Register_Projectile_Force(const struct FFluidForceDynamic& Dynamic_Fluid_Force, class USceneComponent* Tracked_Component);
	void Remove_Projectile_Force(class UActorComponent* Component);
	void Clear_Sim_from_Waterbody_MIDs();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluidSim_01_C">();
	}
	static class ABP_FluidSim_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FluidSim_01_C>();
	}
};
static_assert(alignof(ABP_FluidSim_01_C) == 0x000008, "Wrong alignment on ABP_FluidSim_01_C");
static_assert(sizeof(ABP_FluidSim_01_C) == 0x000440, "Wrong size on ABP_FluidSim_01_C");
static_assert(offsetof(ABP_FluidSim_01_C, UberGraphFrame) == 0x000218, "Member 'ABP_FluidSim_01_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DefaultSceneRoot) == 0x000220, "Member 'ABP_FluidSim_01_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, SimMID) == 0x000228, "Member 'ABP_FluidSim_01_C::SimMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, RenderNormalsMID) == 0x000230, "Member 'ABP_FluidSim_01_C::RenderNormalsMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DisplayMID) == 0x000238, "Member 'ABP_FluidSim_01_C::DisplayMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DisplayBottomMID) == 0x000240, "Member 'ABP_FluidSim_01_C::DisplayBottomMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, CrossSectionMID) == 0x000248, "Member 'ABP_FluidSim_01_C::CrossSectionMID' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, RTs) == 0x000250, "Member 'ABP_FluidSim_01_C::RTs' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Display_Material) == 0x000260, "Member 'ABP_FluidSim_01_C::Display_Material' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Virtual_FPS) == 0x000268, "Member 'ABP_FluidSim_01_C::Virtual_FPS' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Passes) == 0x00026C, "Member 'ABP_FluidSim_01_C::Passes' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, TimeAccumulator) == 0x000270, "Member 'ABP_FluidSim_01_C::TimeAccumulator' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, FixedStep) == 0x000274, "Member 'ABP_FluidSim_01_C::FixedStep' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Enabled) == 0x000278, "Member 'ABP_FluidSim_01_C::Enabled' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Fluid_Size) == 0x00027C, "Member 'ABP_FluidSim_01_C::Fluid_Size' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Resolution) == 0x000280, "Member 'ABP_FluidSim_01_C::Resolution' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Boundary_Condition) == 0x000284, "Member 'ABP_FluidSim_01_C::Boundary_Condition' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Travel_Speed) == 0x000288, "Member 'ABP_FluidSim_01_C::Travel_Speed' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Damping) == 0x00028C, "Member 'ABP_FluidSim_01_C::Damping' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, NormalRT) == 0x000290, "Member 'ABP_FluidSim_01_C::NormalRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, CutPos) == 0x000298, "Member 'ABP_FluidSim_01_C::CutPos' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevLoc) == 0x0002A4, "Member 'ABP_FluidSim_01_C::PrevLoc' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrecLoc2) == 0x0002B0, "Member 'ABP_FluidSim_01_C::PrecLoc2' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevOffset) == 0x0002BC, "Member 'ABP_FluidSim_01_C::PrevOffset' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PrevOffset2) == 0x0002C8, "Member 'ABP_FluidSim_01_C::PrevOffset2' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, GridCenter) == 0x0002D4, "Member 'ABP_FluidSim_01_C::GridCenter' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, TempRT) == 0x0002E0, "Member 'ABP_FluidSim_01_C::TempRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ForcesRT) == 0x0002E8, "Member 'ABP_FluidSim_01_C::ForcesRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ApplyForces) == 0x0002F0, "Member 'ABP_FluidSim_01_C::ApplyForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, LandscapeWaterInfo) == 0x0002F8, "Member 'ABP_FluidSim_01_C::LandscapeWaterInfo' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Renders_Per_Frame) == 0x000300, "Member 'ABP_FluidSim_01_C::Renders_Per_Frame' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Show_Cross_Section) == 0x000304, "Member 'ABP_FluidSim_01_C::Show_Cross_Section' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Perf_Test_Mode) == 0x000305, "Member 'ABP_FluidSim_01_C::Perf_Test_Mode' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, PerfRT) == 0x000308, "Member 'ABP_FluidSim_01_C::PerfRT' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ImpulseForces) == 0x000310, "Member 'ABP_FluidSim_01_C::ImpulseForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, DynamicForces) == 0x000320, "Member 'ABP_FluidSim_01_C::DynamicForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ForceParentAndMIDMap) == 0x000370, "Member 'ABP_FluidSim_01_C::ForceParentAndMIDMap' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Show_Simulation_Mesh) == 0x0003C0, "Member 'ABP_FluidSim_01_C::Show_Simulation_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Fluid_Display_Mesh) == 0x0003C8, "Member 'ABP_FluidSim_01_C::Fluid_Display_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Cross_Section_Mesh) == 0x0003D0, "Member 'ABP_FluidSim_01_C::Cross_Section_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, FluidSizeSquared) == 0x0003D8, "Member 'ABP_FluidSim_01_C::FluidSizeSquared' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, LocalPawnRef) == 0x0003DC, "Member 'ABP_FluidSim_01_C::LocalPawnRef' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Debug_Text) == 0x0003DD, "Member 'ABP_FluidSim_01_C::Debug_Text' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Pawn_Check_Every_N_Frames) == 0x0003E0, "Member 'ABP_FluidSim_01_C::Pawn_Check_Every_N_Frames' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, ProjectileForces) == 0x0003E8, "Member 'ABP_FluidSim_01_C::ProjectileForces' has a wrong offset!");
static_assert(offsetof(ABP_FluidSim_01_C, Follow_Player_) == 0x000438, "Member 'ABP_FluidSim_01_C::Follow_Player_' has a wrong offset!");

}

