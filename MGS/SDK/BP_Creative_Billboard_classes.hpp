#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Creative_Billboard

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"
#include "EVisibleInGameState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Creative_Billboard.BP_Creative_Billboard_C
// 0x00B0 (0x0C50 - 0x0BA0)
class ABP_Creative_Billboard_C final : public ABuildingProp
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCreative_VisibleInGame_Component_C*    VisibleInGameComponent;                            // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortMinigameLogicComponent*            FortMinigameLogic;                                 // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  HideTextReceiverComponent;                         // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortGameplayReceiverMessageComponent*  ShowTextReceiverComponent;                         // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ToolPickingBox;                                    // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UToyOptionsComponent_C*                 ToyOptionsComponent;                               // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Background;                                        // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FString                                 UserDefinedText;                                   // 0x0BE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          bShowBorder;                                       // 0x0BF0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_BF1[0x3];                                      // 0x0BF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           BackgroundColor;                                   // 0x0BF4(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  HorizontalTextAlignment;                           // 0x0C04(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C05[0x3];                                      // 0x0C05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextSize;                                          // 0x0C08(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         ViewDistance;                                      // 0x0C0C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAlwaysFaceCamera;                                 // 0x0C10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasInRangeLastCheck;                               // 0x0C11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C12[0x2];                                      // 0x0C12(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackgroundColorOverride;                           // 0x0C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x0C18(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTextVisible;                                    // 0x0C28(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_C29[0x3];                                      // 0x0C29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnabledIndex;                                      // 0x0C2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TextFont;                                          // 0x0C30(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Show_Debug_Text;                                   // 0x0C34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C35[0x3];                                      // 0x0C35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BackgroundRelativeRotationWithBorder;              // 0x0C38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               BackgroundRelativeRotationWithoutBorder;           // 0x0C44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_Creative_Billboard(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnWorldReady();
	void BndEvt__VisibleInGameComponent_K2Node_ComponentBoundEvent_6_On_Visibility_Changed__DelegateSignature(bool Visible);
	void Update_Static_Mesh_Component_Visibility_Options();
	void Play_Mode_Changed(class AFortMinigame* Minigame, bool bIsInPlayMode);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_5_OnMinigameAssignmentChanged__DelegateSignature(class AFortMinigame* Minigame);
	void BndEvt__FortMinigameLogic_K2Node_ComponentBoundEvent_4_OnMinigameStateChanged__DelegateSignature(class AFortMinigame* Minigame, EFortMinigameState NewMinigameState);
	void BndEvt__HideTextReceiverComponent_K2Node_ComponentBoundEvent_3_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__ShowTextReceiverComponent_K2Node_ComponentBoundEvent_2_OnGameplayMessageReceived__DelegateSignature(class AController* TriggerInstigator);
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_1_AnyPropertyChangedDelegate__DelegateSignature();
	void BndEvt__ToyOptionsComponent_K2Node_ComponentBoundEvent_0_AnyPropertyChangedDelegate__DelegateSignature();
	void PostUpdateProperties();
	void SetBackgroundColor();
	void SetDisplayText();
	void SetTextSize();
	void SetTextAlignment();
	void UpdateProperties();
	void SetTextColor();
	void SetViewDistance();
	void OnRep_bShowBorder();
	void OnRep_BackgroundColor();
	void OnRep_HorizontalTextAlignment();
	void OnRep_TextSize();
	void OnRep_TextColor();
	void SetTextVisibility(bool Visible);
	void OnRep_bIsTextVisible();
	void SetVisibilityBasedOnState(EFortMinigameState MinigameState);
	void OnRep_TextFont();
	void SetTextFont();

	TArray<class UMeshComponent*> GetMeshComponents() const;
	class UStaticMesh* GetCollisionStaticMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Creative_Billboard_C">();
	}
	static class ABP_Creative_Billboard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Creative_Billboard_C>();
	}
};
static_assert(alignof(ABP_Creative_Billboard_C) == 0x000008, "Wrong alignment on ABP_Creative_Billboard_C");
static_assert(sizeof(ABP_Creative_Billboard_C) == 0x000C50, "Wrong size on ABP_Creative_Billboard_C");
static_assert(offsetof(ABP_Creative_Billboard_C, UberGraphFrame) == 0x000BA0, "Member 'ABP_Creative_Billboard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, VisibleInGameComponent) == 0x000BA8, "Member 'ABP_Creative_Billboard_C::VisibleInGameComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, FortMinigameLogic) == 0x000BB0, "Member 'ABP_Creative_Billboard_C::FortMinigameLogic' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, HideTextReceiverComponent) == 0x000BB8, "Member 'ABP_Creative_Billboard_C::HideTextReceiverComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ShowTextReceiverComponent) == 0x000BC0, "Member 'ABP_Creative_Billboard_C::ShowTextReceiverComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ToolPickingBox) == 0x000BC8, "Member 'ABP_Creative_Billboard_C::ToolPickingBox' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ToyOptionsComponent) == 0x000BD0, "Member 'ABP_Creative_Billboard_C::ToyOptionsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Background) == 0x000BD8, "Member 'ABP_Creative_Billboard_C::Background' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, UserDefinedText) == 0x000BE0, "Member 'ABP_Creative_Billboard_C::UserDefinedText' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, bShowBorder) == 0x000BF0, "Member 'ABP_Creative_Billboard_C::bShowBorder' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundColor) == 0x000BF4, "Member 'ABP_Creative_Billboard_C::BackgroundColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, HorizontalTextAlignment) == 0x000C04, "Member 'ABP_Creative_Billboard_C::HorizontalTextAlignment' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextSize) == 0x000C08, "Member 'ABP_Creative_Billboard_C::TextSize' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, ViewDistance) == 0x000C0C, "Member 'ABP_Creative_Billboard_C::ViewDistance' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, bAlwaysFaceCamera) == 0x000C10, "Member 'ABP_Creative_Billboard_C::bAlwaysFaceCamera' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, WasInRangeLastCheck) == 0x000C11, "Member 'ABP_Creative_Billboard_C::WasInRangeLastCheck' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundColorOverride) == 0x000C14, "Member 'ABP_Creative_Billboard_C::BackgroundColorOverride' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextColor) == 0x000C18, "Member 'ABP_Creative_Billboard_C::TextColor' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, bIsTextVisible) == 0x000C28, "Member 'ABP_Creative_Billboard_C::bIsTextVisible' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, EnabledIndex) == 0x000C2C, "Member 'ABP_Creative_Billboard_C::EnabledIndex' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, TextFont) == 0x000C30, "Member 'ABP_Creative_Billboard_C::TextFont' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, Show_Debug_Text) == 0x000C34, "Member 'ABP_Creative_Billboard_C::Show_Debug_Text' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundRelativeRotationWithBorder) == 0x000C38, "Member 'ABP_Creative_Billboard_C::BackgroundRelativeRotationWithBorder' has a wrong offset!");
static_assert(offsetof(ABP_Creative_Billboard_C, BackgroundRelativeRotationWithoutBorder) == 0x000C44, "Member 'ABP_Creative_Billboard_C::BackgroundRelativeRotationWithoutBorder' has a wrong offset!");

}

