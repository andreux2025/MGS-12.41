#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_Uncle_Brolly_Dash

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GA_Uncle_Brolly_Dash.GA_Uncle_Brolly_Dash_C
// 0x0328 (0x0D58 - 0x0A30)
class UGA_Uncle_Brolly_Dash_C final : public UFortGameplayAbility
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0A30(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         DashDuration;                                      // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            H_DashStart;                                       // 0x0A3C(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A44[0x4];                                      // 0x0A44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        PlayerPawn;                                        // 0x0A48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AB_Uncle_Brolly_Block_Collision_C*      BP_BlockingVolume;                                 // 0x0A50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            PlayerController;                                  // 0x0A58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceMultiplier;                                // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_UncleDashTier0;                                 // 0x0A64(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6C[0x4];                                      // 0x0A6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         GE_DashDamageValue;                                // 0x0A70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          KilledBuilding;                                    // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A91[0x3];                                      // 0x0A91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GC_DashImpact;                                     // 0x0A94(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          HitSomething;                                      // 0x0A9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9D[0x3];                                      // 0x0A9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AEmitterCameraLensEffectBase*           LensEffect;                                        // 0x0AA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TestingKineticEnergyTier;                          // 0x0AA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Testing;                                           // 0x0AAC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AAD[0x3];                                      // 0x0AAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DashCameraMode;                                    // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Tier0Dash;                                         // 0x0AB8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AB9[0x7];                                      // 0x0AB9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           M_DashIntro;                                       // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FActiveGameplayEffectHandle            H_DashEnd;                                         // 0x0AC8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         ChargeTimeTier1Min;                                // 0x0AD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ChargeTimeTier1Max;                                // 0x0AF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ChargeTimeTier2Min;                                // 0x0B10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ChargeTimeTier2Max;                                // 0x0B30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         ChargeTimeTier3Min;                                // 0x0B50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         DashCameraPitchOffset;                             // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DashLevel;                                         // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         DashImpulseXY;                                     // 0x0B78(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashImpulseZ;                                      // 0x0B98(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            DashRootMotionCurve;                               // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashPlayrate;                                      // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DashLoopAnimLength;                                // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           M_Dash;                                            // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTime;                                        // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD4[0x4];                                      // 0x0BD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           M_HitPlayer;                                       // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           M_HitWorld;                                        // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_DashTier1;                                      // 0x0BE8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_DashTier2;                                      // 0x0BF0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_DashTier3;                                      // 0x0BF8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   DashTagetSelectionTaskName;                        // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   DashRootMotionTaskName;                            // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FScalableFloat                         DashImpulseMultiplierTier0;                        // 0x0C10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashImpulseMultiplierTier1;                        // 0x0C30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashImpulseMultiplierTier2;                        // 0x0C50(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashImpulseMultiplierTier3;                        // 0x0C70(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DistanceMultiplierTier0;                           // 0x0C90(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DistanceMultiplierTier1;                           // 0x0CB0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DistanceMultiplierTier2;                           // 0x0CD0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DistanceMultiplierTier3;                           // 0x0CF0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         BaseDashDuration;                                  // 0x0D10(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         DashStrength;                                      // 0x0D30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 GE_ImpactPlayer;                                   // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GA_Uncle_Brolly_Dash(int32 EntryPoint);
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_OnEndAbility(bool bWasCancelled);
	void OnCompleted_2A449C794E18083C057A77B57327A251(class FName NotifyName);
	void OnBlendOut_2A449C794E18083C057A77B57327A251(class FName NotifyName);
	void OnInterrupted_2A449C794E18083C057A77B57327A251(class FName NotifyName);
	void OnNotifyBegin_2A449C794E18083C057A77B57327A251(class FName NotifyName);
	void OnNotifyEnd_2A449C794E18083C057A77B57327A251(class FName NotifyName);
	void OnCompleted_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnBlendOut_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnInterrupted_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnCancelled_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnNotifyBegin_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnNotifyEnd_867B3DB5411C5F17002070959CA9C0AB(const struct FGameplayTag& NotifyTag);
	void OnSync_79FD55D94DD99BB4B17F6C9573DDAF18();
	void OnCompleted_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnBlendOut_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnInterrupted_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnCancelled_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnNotifyBegin_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnNotifyEnd_71A236E547B31217AA06379E7247872C(const struct FGameplayTag& NotifyTag);
	void OnStateEnded_ADE1B2F6432D649636A3059D32859EC4();
	void OnStateInterrupted_ADE1B2F6432D649636A3059D32859EC4();
	void OnFinish_DADB1E1843ED919732938D9934B9628E();
	void OnSync_ED0A017543AACC9EF03460B5DE129E48();
	void Targeted_701247AE44973D1FC7ABDDA7F6420ABE(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void Cancelled_701247AE44973D1FC7ABDDA7F6420ABE(const struct FGameplayAbilityTargetDataHandle& TargetData, const struct FGameplayTag& ApplicationTag);
	void InitAbility();
	void GetChargeTimeAndSetDashVars();
	void CheckIfKilledBuilding(class ABuildingActor* BuildingActor);
	void PlayImpactGC(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void PlayDashFeedback();
	void CleanUpDash();
	void ImpulseHitDashTarget(const struct FGameplayAbilityTargetDataHandle& TargetData);
	void OnRep_ChargeInterval();
	void OnRep_ChargeTime();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GA_Uncle_Brolly_Dash_C">();
	}
	static class UGA_Uncle_Brolly_Dash_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGA_Uncle_Brolly_Dash_C>();
	}
};
static_assert(alignof(UGA_Uncle_Brolly_Dash_C) == 0x000008, "Wrong alignment on UGA_Uncle_Brolly_Dash_C");
static_assert(sizeof(UGA_Uncle_Brolly_Dash_C) == 0x000D58, "Wrong size on UGA_Uncle_Brolly_Dash_C");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, UberGraphFrame) == 0x000A30, "Member 'UGA_Uncle_Brolly_Dash_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashDuration) == 0x000A38, "Member 'UGA_Uncle_Brolly_Dash_C::DashDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, H_DashStart) == 0x000A3C, "Member 'UGA_Uncle_Brolly_Dash_C::H_DashStart' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, PlayerPawn) == 0x000A48, "Member 'UGA_Uncle_Brolly_Dash_C::PlayerPawn' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, BP_BlockingVolume) == 0x000A50, "Member 'UGA_Uncle_Brolly_Dash_C::BP_BlockingVolume' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, PlayerController) == 0x000A58, "Member 'UGA_Uncle_Brolly_Dash_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DistanceMultiplier) == 0x000A60, "Member 'UGA_Uncle_Brolly_Dash_C::DistanceMultiplier' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GC_UncleDashTier0) == 0x000A64, "Member 'UGA_Uncle_Brolly_Dash_C::GC_UncleDashTier0' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GE_DashDamageValue) == 0x000A70, "Member 'UGA_Uncle_Brolly_Dash_C::GE_DashDamageValue' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, KilledBuilding) == 0x000A90, "Member 'UGA_Uncle_Brolly_Dash_C::KilledBuilding' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GC_DashImpact) == 0x000A94, "Member 'UGA_Uncle_Brolly_Dash_C::GC_DashImpact' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, HitSomething) == 0x000A9C, "Member 'UGA_Uncle_Brolly_Dash_C::HitSomething' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, LensEffect) == 0x000AA0, "Member 'UGA_Uncle_Brolly_Dash_C::LensEffect' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, TestingKineticEnergyTier) == 0x000AA8, "Member 'UGA_Uncle_Brolly_Dash_C::TestingKineticEnergyTier' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, Testing) == 0x000AAC, "Member 'UGA_Uncle_Brolly_Dash_C::Testing' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashCameraMode) == 0x000AB0, "Member 'UGA_Uncle_Brolly_Dash_C::DashCameraMode' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, Tier0Dash) == 0x000AB8, "Member 'UGA_Uncle_Brolly_Dash_C::Tier0Dash' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, M_DashIntro) == 0x000AC0, "Member 'UGA_Uncle_Brolly_Dash_C::M_DashIntro' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, H_DashEnd) == 0x000AC8, "Member 'UGA_Uncle_Brolly_Dash_C::H_DashEnd' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTimeTier1Min) == 0x000AD0, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTimeTier1Min' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTimeTier1Max) == 0x000AF0, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTimeTier1Max' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTimeTier2Min) == 0x000B10, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTimeTier2Min' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTimeTier2Max) == 0x000B30, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTimeTier2Max' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTimeTier3Min) == 0x000B50, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTimeTier3Min' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashCameraPitchOffset) == 0x000B70, "Member 'UGA_Uncle_Brolly_Dash_C::DashCameraPitchOffset' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashLevel) == 0x000B74, "Member 'UGA_Uncle_Brolly_Dash_C::DashLevel' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseXY) == 0x000B78, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseXY' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseZ) == 0x000B98, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseZ' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashRootMotionCurve) == 0x000BB8, "Member 'UGA_Uncle_Brolly_Dash_C::DashRootMotionCurve' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashPlayrate) == 0x000BC0, "Member 'UGA_Uncle_Brolly_Dash_C::DashPlayrate' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashLoopAnimLength) == 0x000BC4, "Member 'UGA_Uncle_Brolly_Dash_C::DashLoopAnimLength' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, M_Dash) == 0x000BC8, "Member 'UGA_Uncle_Brolly_Dash_C::M_Dash' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, ChargeTime) == 0x000BD0, "Member 'UGA_Uncle_Brolly_Dash_C::ChargeTime' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, M_HitPlayer) == 0x000BD8, "Member 'UGA_Uncle_Brolly_Dash_C::M_HitPlayer' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, M_HitWorld) == 0x000BE0, "Member 'UGA_Uncle_Brolly_Dash_C::M_HitWorld' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GC_DashTier1) == 0x000BE8, "Member 'UGA_Uncle_Brolly_Dash_C::GC_DashTier1' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GC_DashTier2) == 0x000BF0, "Member 'UGA_Uncle_Brolly_Dash_C::GC_DashTier2' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GC_DashTier3) == 0x000BF8, "Member 'UGA_Uncle_Brolly_Dash_C::GC_DashTier3' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashTagetSelectionTaskName) == 0x000C00, "Member 'UGA_Uncle_Brolly_Dash_C::DashTagetSelectionTaskName' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashRootMotionTaskName) == 0x000C08, "Member 'UGA_Uncle_Brolly_Dash_C::DashRootMotionTaskName' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseMultiplierTier0) == 0x000C10, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseMultiplierTier0' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseMultiplierTier1) == 0x000C30, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseMultiplierTier1' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseMultiplierTier2) == 0x000C50, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseMultiplierTier2' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashImpulseMultiplierTier3) == 0x000C70, "Member 'UGA_Uncle_Brolly_Dash_C::DashImpulseMultiplierTier3' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DistanceMultiplierTier0) == 0x000C90, "Member 'UGA_Uncle_Brolly_Dash_C::DistanceMultiplierTier0' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DistanceMultiplierTier1) == 0x000CB0, "Member 'UGA_Uncle_Brolly_Dash_C::DistanceMultiplierTier1' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DistanceMultiplierTier2) == 0x000CD0, "Member 'UGA_Uncle_Brolly_Dash_C::DistanceMultiplierTier2' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DistanceMultiplierTier3) == 0x000CF0, "Member 'UGA_Uncle_Brolly_Dash_C::DistanceMultiplierTier3' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, BaseDashDuration) == 0x000D10, "Member 'UGA_Uncle_Brolly_Dash_C::BaseDashDuration' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, DashStrength) == 0x000D30, "Member 'UGA_Uncle_Brolly_Dash_C::DashStrength' has a wrong offset!");
static_assert(offsetof(UGA_Uncle_Brolly_Dash_C, GE_ImpactPlayer) == 0x000D50, "Member 'UGA_Uncle_Brolly_Dash_C::GE_ImpactPlayer' has a wrong offset!");

}

