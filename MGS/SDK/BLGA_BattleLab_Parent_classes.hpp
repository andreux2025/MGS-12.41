#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BLGA_BattleLab_Parent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_HeldObject_GenericWeights_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "BL_HeldState_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BLGA_BattleLab_Parent.BLGA_BattleLab_Parent_C
// 0x01C0 (0x0950 - 0x0790)
class ABLGA_BattleLab_Parent_C final : public ABattleLabDeviceGameplayActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0790(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UFortWaterInteractionComponent*         FortWaterInteraction;                              // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortLinkToActorComponent*              FortLinkToActor;                                   // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortHeldObjectComponent*               FortHeldObject;                                    // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFortProjectileMovementComponent*       FortProjectileMovement;                            // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RepStartMoving;                                    // 0x07C0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HitPlayer;                                      // 0x07C4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_HitWorld;                                       // 0x07CC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Throw;                                          // 0x07D4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_EnterWater;                                     // 0x07DC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Pickup;                                         // 0x07E4(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           GC_Death;                                          // 0x07EC(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayDeathGC;                                       // 0x07F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RepHideActor;                                      // 0x07F5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay)
	bool                                          SetHideActorOnDeath;                               // 0x07F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsDestructable;                                    // 0x07F7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FGameplayTag                           GC_GenericDeath;                                   // 0x07F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         WorldStopSlop;                                     // 0x0800(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AttachToWallsAndCeilings;                          // 0x0804(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_805[0x3];                                      // 0x0805(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ELinkToDirection, struct FVector>        Map_DirectionToRelativeVector;                     // 0x0808(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, AdvancedDisplay)
	ELinkToDirection                              DirectionToAttach;                                 // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_859[0x7];                                      // 0x0859(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 EmptyAttachLinkActor;                              // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_868[0x8];                                      // 0x0868(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AttachRelativeTrans;                               // 0x0870(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay)
	struct FTransform                             AttachTransform;                                   // 0x08A0(0x0030)(Edit, BlueprintVisible, Net, DisableEditOnInstance, SaveGame, IsPlainOldData, RepNotify, NoDestructor)
	class FText                                   FirstInteractString;                               // 0x08D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SecondInteractString;                              // 0x08E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         SecondInteractTime;                                // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FirstInteractTime;                                 // 0x0904(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EverBeenThrownPlaced;                              // 0x0908(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          AlreadySavedDefaultTransform;                      // 0x0909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay)
	Enum_HeldObject_GenericWeights                ObjectWeights;                                     // 0x090A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90B[0x5];                                      // 0x090B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStartedMoving;                                   // 0x0910(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABLGA_BattleLab_Parent_C*               AttachBaseDevice;                                  // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBL_HeldState                                 HeldState;                                         // 0x0928(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_929[0x7];                                      // 0x0929(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TC_BlockPickup;                                    // 0x0930(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnStartedMoving__DelegateSignature();
	void ExecuteUbergraph_BLGA_BattleLab_Parent(int32 EntryPoint);
	void OnHeldObjectStateChangedClient(EBL_HeldState HeldState_0);
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_8_OnHeldObjectDropped__DelegateSignature();
	void OnBaseDeviceStartedMoving();
	void ReceiveDestroyed();
	void OnSecondInteract(class AFortPawn* InteractingPawn);
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_5_OnHeldObjectPlaced__DelegateSignature();
	void OnFirstInteract(class AFortPawn* Interacting_Pawn);
	void ResetRelativeTransformOnAttach();
	void ReceiveBeginPlay();
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_6_OnHeldObjectPickedUp__DelegateSignature();
	void AttachSetup(const struct FVector& Location, const struct FVector& HitNormal, bool NewParam);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_4_OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void BndEvt__FortProjectileMovement_K2Node_ComponentBoundEvent_1_OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void PlayGenericDeath();
	void BndEvt__FortLinkToActor_K2Node_ComponentBoundEvent_0_OnLinkedActorDestroyed__DelegateSignature();
	void HideActor();
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__FortWaterInteraction_K2Node_ComponentBoundEvent_3_WaterInteractionOnEnterWater__DelegateSignature(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_2_OnHeldObjectThrown__DelegateSignature();
	void OnRep_RepStartMoving();
	void OnRep_RepHideActor();
	bool ShouldDie(float Damage, class AController* EventInstigator, class AActor* DamageCauser);
	void FindAttachAngle(const struct FVector& HitLoc);
	void GetAttachComponent(class USceneComponent** Component);
	void SetAttachDefaultTransform();
	void OnRep_AttachTransform();
	void SetBeenThrownPlaced();
	void OnRep_HeldState();

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	bool BlueprintGetInteractionTime(const class AFortPawn* InteractingPawn, float* OutInteractionTime, const EInteractionBeingAttempted InteractionBeingAttempted) const;
	void GetCanFirstInteract(class AFortPawn* InteractingPawn, bool* Return) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BLGA_BattleLab_Parent_C">();
	}
	static class ABLGA_BattleLab_Parent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABLGA_BattleLab_Parent_C>();
	}
};
static_assert(alignof(ABLGA_BattleLab_Parent_C) == 0x000010, "Wrong alignment on ABLGA_BattleLab_Parent_C");
static_assert(sizeof(ABLGA_BattleLab_Parent_C) == 0x000950, "Wrong size on ABLGA_BattleLab_Parent_C");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, UberGraphFrame) == 0x000790, "Member 'ABLGA_BattleLab_Parent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FortWaterInteraction) == 0x000798, "Member 'ABLGA_BattleLab_Parent_C::FortWaterInteraction' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FortLinkToActor) == 0x0007A0, "Member 'ABLGA_BattleLab_Parent_C::FortLinkToActor' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FortHeldObject) == 0x0007A8, "Member 'ABLGA_BattleLab_Parent_C::FortHeldObject' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FortProjectileMovement) == 0x0007B0, "Member 'ABLGA_BattleLab_Parent_C::FortProjectileMovement' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, Capsule) == 0x0007B8, "Member 'ABLGA_BattleLab_Parent_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, RepStartMoving) == 0x0007C0, "Member 'ABLGA_BattleLab_Parent_C::RepStartMoving' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_HitPlayer) == 0x0007C4, "Member 'ABLGA_BattleLab_Parent_C::GC_HitPlayer' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_HitWorld) == 0x0007CC, "Member 'ABLGA_BattleLab_Parent_C::GC_HitWorld' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_Throw) == 0x0007D4, "Member 'ABLGA_BattleLab_Parent_C::GC_Throw' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_EnterWater) == 0x0007DC, "Member 'ABLGA_BattleLab_Parent_C::GC_EnterWater' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_Pickup) == 0x0007E4, "Member 'ABLGA_BattleLab_Parent_C::GC_Pickup' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_Death) == 0x0007EC, "Member 'ABLGA_BattleLab_Parent_C::GC_Death' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, PlayDeathGC) == 0x0007F4, "Member 'ABLGA_BattleLab_Parent_C::PlayDeathGC' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, RepHideActor) == 0x0007F5, "Member 'ABLGA_BattleLab_Parent_C::RepHideActor' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, SetHideActorOnDeath) == 0x0007F6, "Member 'ABLGA_BattleLab_Parent_C::SetHideActorOnDeath' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, IsDestructable) == 0x0007F7, "Member 'ABLGA_BattleLab_Parent_C::IsDestructable' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, GC_GenericDeath) == 0x0007F8, "Member 'ABLGA_BattleLab_Parent_C::GC_GenericDeath' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, WorldStopSlop) == 0x000800, "Member 'ABLGA_BattleLab_Parent_C::WorldStopSlop' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, AttachToWallsAndCeilings) == 0x000804, "Member 'ABLGA_BattleLab_Parent_C::AttachToWallsAndCeilings' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, Map_DirectionToRelativeVector) == 0x000808, "Member 'ABLGA_BattleLab_Parent_C::Map_DirectionToRelativeVector' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, DirectionToAttach) == 0x000858, "Member 'ABLGA_BattleLab_Parent_C::DirectionToAttach' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, EmptyAttachLinkActor) == 0x000860, "Member 'ABLGA_BattleLab_Parent_C::EmptyAttachLinkActor' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, AttachRelativeTrans) == 0x000870, "Member 'ABLGA_BattleLab_Parent_C::AttachRelativeTrans' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, AttachTransform) == 0x0008A0, "Member 'ABLGA_BattleLab_Parent_C::AttachTransform' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FirstInteractString) == 0x0008D0, "Member 'ABLGA_BattleLab_Parent_C::FirstInteractString' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, SecondInteractString) == 0x0008E8, "Member 'ABLGA_BattleLab_Parent_C::SecondInteractString' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, SecondInteractTime) == 0x000900, "Member 'ABLGA_BattleLab_Parent_C::SecondInteractTime' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, FirstInteractTime) == 0x000904, "Member 'ABLGA_BattleLab_Parent_C::FirstInteractTime' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, EverBeenThrownPlaced) == 0x000908, "Member 'ABLGA_BattleLab_Parent_C::EverBeenThrownPlaced' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, AlreadySavedDefaultTransform) == 0x000909, "Member 'ABLGA_BattleLab_Parent_C::AlreadySavedDefaultTransform' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, ObjectWeights) == 0x00090A, "Member 'ABLGA_BattleLab_Parent_C::ObjectWeights' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, OnStartedMoving) == 0x000910, "Member 'ABLGA_BattleLab_Parent_C::OnStartedMoving' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, AttachBaseDevice) == 0x000920, "Member 'ABLGA_BattleLab_Parent_C::AttachBaseDevice' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, HeldState) == 0x000928, "Member 'ABLGA_BattleLab_Parent_C::HeldState' has a wrong offset!");
static_assert(offsetof(ABLGA_BattleLab_Parent_C, TC_BlockPickup) == 0x000930, "Member 'ABLGA_BattleLab_Parent_C::TC_BlockPickup' has a wrong offset!");

}

