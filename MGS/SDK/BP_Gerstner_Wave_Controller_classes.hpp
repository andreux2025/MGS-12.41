#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Gerstner_Wave_Controller

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "WaterQualityLevel_structs.hpp"
#include "OverrideScalarParam_structs.hpp"
#include "WaveSpectrumSettings_structs.hpp"
#include "WaveParams_structs.hpp"
#include "OverrideVectorParam_structs.hpp"
#include "Water_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Gerstner_Wave_Controller.BP_Gerstner_Wave_Controller_C
// 0x0268 (0x0480 - 0x0218)
class ABP_Gerstner_Wave_Controller_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UHierarchicalInstancedStaticMeshComponent* HierarchicalInstancedStaticMesh;                   // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Mid;                                               // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWaterQualityLevel                            Quality_Setting;                                   // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxWavesPerWaterBody;                              // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveSpectrumSettings                  Wave_Generation_Spectrum;                          // 0x0240(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Seed;                                              // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	float                                         Lastalpha;                                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Detail_Normal_Intensity;                           // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Detail_Normal_Scale;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOverrideScalarParam>           Override_Scalar_Params;                            // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FOverrideVectorParam>           Override_Vector_Params;                            // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                         Manual_Time;                                       // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Freeze_Time_Editor;                                // 0x02C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Tick_In_Game;                                      // 0x02C5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C6[0x2];                                      // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Inscatter_Brightness;                              // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Inscatter_Contrast;                                // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Randomness;                                        // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaveParams>                    Waves;                                             // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FWaveParams>                    Override_Waves;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	int32                                         Display_Waves;                                     // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Detail_Normal;                                     // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Overrides;                                  // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Cubemap;                                           // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BottomMesh;                                        // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Spawn_Water_Meshes;                                // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Grid_Size;                                         // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grid_Cells_X;                                      // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Grid_Cells_Y;                                      // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Water_HISMC_Grid_C*                 Grid;                                              // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseOceanwaves;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 WaveParamsRT;                                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Depth_for_Full_Waves;                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveSpectrumSettings                  Lake_Spectrum;                                     // 0x0354(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveSpectrumSettings                  Null_Spectrum;                                     // 0x039C(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWaterWaveParams>               NullWaves;                                         // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FWaterWaveParams>               OceanWaves;                                        // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FWaterWaveParams>               WaterWaves;                                        // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FWaterWaveParams>               LakeWaves;                                         // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor)
	class ALandscapeWaterInfo_C*                  LandscaleWaterINfo;                                // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWaterMeshActor*                        WaterMeshActor;                                    // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FWaveSpectrumSettings                  Ocean_Spectrum;                                    // 0x0438(0x0048)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Gerstner_Wave_Controller(int32 EntryPoint);
	void Spawn_Grid();
	void Harvest_Material_Params();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Set_All_Wave_MPC_Params();
	void Manual_Parameter_Overrides();
	void General_MPC_Params();
	void Set_Single_Wave_MPC_Parameters(const struct FWaveParams& WaveParams, int32 Idx);
	void Set_Distance_Field(class UTexture* Rt);
	void GetWaterWaves(TArray<struct FWaterWaveParams>* WaterWaveParams, float* BigWaveDepth);
	void RenderWaveTextureData();
	void Set_Waves_On_WaterBodies();
	void Generate_Spectrum(const struct FWaveSpectrumSettings& Spectrum, TArray<struct FWaterWaveParams>* Waves_0);
	void Render_Standalone_Waves();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Gerstner_Wave_Controller_C">();
	}
	static class ABP_Gerstner_Wave_Controller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Gerstner_Wave_Controller_C>();
	}
};
static_assert(alignof(ABP_Gerstner_Wave_Controller_C) == 0x000008, "Wrong alignment on ABP_Gerstner_Wave_Controller_C");
static_assert(sizeof(ABP_Gerstner_Wave_Controller_C) == 0x000480, "Wrong size on ABP_Gerstner_Wave_Controller_C");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, UberGraphFrame) == 0x000218, "Member 'ABP_Gerstner_Wave_Controller_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, HierarchicalInstancedStaticMesh) == 0x000220, "Member 'ABP_Gerstner_Wave_Controller_C::HierarchicalInstancedStaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_Gerstner_Wave_Controller_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Mid) == 0x000230, "Member 'ABP_Gerstner_Wave_Controller_C::Mid' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Quality_Setting) == 0x000238, "Member 'ABP_Gerstner_Wave_Controller_C::Quality_Setting' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, MaxWavesPerWaterBody) == 0x00023C, "Member 'ABP_Gerstner_Wave_Controller_C::MaxWavesPerWaterBody' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Wave_Generation_Spectrum) == 0x000240, "Member 'ABP_Gerstner_Wave_Controller_C::Wave_Generation_Spectrum' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Seed) == 0x000288, "Member 'ABP_Gerstner_Wave_Controller_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Lastalpha) == 0x000290, "Member 'ABP_Gerstner_Wave_Controller_C::Lastalpha' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Detail_Normal_Intensity) == 0x000294, "Member 'ABP_Gerstner_Wave_Controller_C::Detail_Normal_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Detail_Normal_Scale) == 0x000298, "Member 'ABP_Gerstner_Wave_Controller_C::Detail_Normal_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Override_Scalar_Params) == 0x0002A0, "Member 'ABP_Gerstner_Wave_Controller_C::Override_Scalar_Params' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Override_Vector_Params) == 0x0002B0, "Member 'ABP_Gerstner_Wave_Controller_C::Override_Vector_Params' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Manual_Time) == 0x0002C0, "Member 'ABP_Gerstner_Wave_Controller_C::Manual_Time' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Freeze_Time_Editor) == 0x0002C4, "Member 'ABP_Gerstner_Wave_Controller_C::Freeze_Time_Editor' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Tick_In_Game) == 0x0002C5, "Member 'ABP_Gerstner_Wave_Controller_C::Tick_In_Game' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Inscatter_Brightness) == 0x0002C8, "Member 'ABP_Gerstner_Wave_Controller_C::Inscatter_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Inscatter_Contrast) == 0x0002CC, "Member 'ABP_Gerstner_Wave_Controller_C::Inscatter_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Material) == 0x0002D0, "Member 'ABP_Gerstner_Wave_Controller_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Randomness) == 0x0002D8, "Member 'ABP_Gerstner_Wave_Controller_C::Randomness' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Waves) == 0x0002E0, "Member 'ABP_Gerstner_Wave_Controller_C::Waves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Override_Waves) == 0x0002F0, "Member 'ABP_Gerstner_Wave_Controller_C::Override_Waves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Display_Waves) == 0x000300, "Member 'ABP_Gerstner_Wave_Controller_C::Display_Waves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Detail_Normal) == 0x000308, "Member 'ABP_Gerstner_Wave_Controller_C::Detail_Normal' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Enable_Overrides) == 0x000310, "Member 'ABP_Gerstner_Wave_Controller_C::Enable_Overrides' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Cubemap) == 0x000318, "Member 'ABP_Gerstner_Wave_Controller_C::Cubemap' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, BottomMesh) == 0x000320, "Member 'ABP_Gerstner_Wave_Controller_C::BottomMesh' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Spawn_Water_Meshes) == 0x000328, "Member 'ABP_Gerstner_Wave_Controller_C::Spawn_Water_Meshes' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Grid_Size) == 0x00032C, "Member 'ABP_Gerstner_Wave_Controller_C::Grid_Size' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Grid_Cells_X) == 0x000330, "Member 'ABP_Gerstner_Wave_Controller_C::Grid_Cells_X' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Grid_Cells_Y) == 0x000334, "Member 'ABP_Gerstner_Wave_Controller_C::Grid_Cells_Y' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Grid) == 0x000338, "Member 'ABP_Gerstner_Wave_Controller_C::Grid' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, UseOceanwaves) == 0x000340, "Member 'ABP_Gerstner_Wave_Controller_C::UseOceanwaves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, WaveParamsRT) == 0x000348, "Member 'ABP_Gerstner_Wave_Controller_C::WaveParamsRT' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Target_Depth_for_Full_Waves) == 0x000350, "Member 'ABP_Gerstner_Wave_Controller_C::Target_Depth_for_Full_Waves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Lake_Spectrum) == 0x000354, "Member 'ABP_Gerstner_Wave_Controller_C::Lake_Spectrum' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Null_Spectrum) == 0x00039C, "Member 'ABP_Gerstner_Wave_Controller_C::Null_Spectrum' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, NullWaves) == 0x0003E8, "Member 'ABP_Gerstner_Wave_Controller_C::NullWaves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, OceanWaves) == 0x0003F8, "Member 'ABP_Gerstner_Wave_Controller_C::OceanWaves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, WaterWaves) == 0x000408, "Member 'ABP_Gerstner_Wave_Controller_C::WaterWaves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, LakeWaves) == 0x000418, "Member 'ABP_Gerstner_Wave_Controller_C::LakeWaves' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, LandscaleWaterINfo) == 0x000428, "Member 'ABP_Gerstner_Wave_Controller_C::LandscaleWaterINfo' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, WaterMeshActor) == 0x000430, "Member 'ABP_Gerstner_Wave_Controller_C::WaterMeshActor' has a wrong offset!");
static_assert(offsetof(ABP_Gerstner_Wave_Controller_C, Ocean_Spectrum) == 0x000438, "Member 'ABP_Gerstner_Wave_Controller_C::Ocean_Spectrum' has a wrong offset!");

}

