#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DailyChallengeStickyNoteWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function DailyChallengeStickyNoteWidget.DailyChallengeStickyNoteWidget_C.ExecuteUbergraph_DailyChallengeStickyNoteWidget
// 0x0008 (0x0008 - 0x0000)
struct DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bHasAssignedChallenge;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bAcceptedReroll;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget) == 0x000004, "Wrong alignment on DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget");
static_assert(sizeof(DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget) == 0x000008, "Wrong size on DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget, EntryPoint) == 0x000000, "Member 'DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget, K2Node_Event_bHasAssignedChallenge) == 0x000004, "Member 'DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget::K2Node_Event_bHasAssignedChallenge' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget, K2Node_Event_bAcceptedReroll) == 0x000005, "Member 'DailyChallengeStickyNoteWidget_C_ExecuteUbergraph_DailyChallengeStickyNoteWidget::K2Node_Event_bAcceptedReroll' has a wrong offset!");

// Function DailyChallengeStickyNoteWidget.DailyChallengeStickyNoteWidget_C.OnHasChallengeUpdated
// 0x0001 (0x0001 - 0x0000)
struct DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated final
{
public:
	bool                                          bHasAssignedChallenge;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated) == 0x000001, "Wrong alignment on DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated");
static_assert(sizeof(DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated) == 0x000001, "Wrong size on DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated, bHasAssignedChallenge) == 0x000000, "Member 'DailyChallengeStickyNoteWidget_C_OnHasChallengeUpdated::bHasAssignedChallenge' has a wrong offset!");

// Function DailyChallengeStickyNoteWidget.DailyChallengeStickyNoteWidget_C.OnReplaceConfirmationClosed
// 0x0001 (0x0001 - 0x0000)
struct DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed final
{
public:
	bool                                          bAcceptedReroll;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed) == 0x000001, "Wrong alignment on DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed");
static_assert(sizeof(DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed) == 0x000001, "Wrong size on DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed, bAcceptedReroll) == 0x000000, "Member 'DailyChallengeStickyNoteWidget_C_OnReplaceConfirmationClosed::bAcceptedReroll' has a wrong offset!");

// Function DailyChallengeStickyNoteWidget.DailyChallengeStickyNoteWidget_C.HandleHasChallengeUpdated
// 0x0010 (0x0010 - 0x0000)
struct DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated final
{
public:
	bool                                          bHasChallenge;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default_1;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated) == 0x000008, "Wrong alignment on DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated");
static_assert(sizeof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated) == 0x000010, "Wrong size on DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, bHasChallenge) == 0x000000, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::bHasChallenge' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, Temp_bool_Variable) == 0x000001, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, Temp_bool_Variable_1) == 0x000002, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, Temp_byte_Variable) == 0x000003, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, Temp_byte_Variable_1) == 0x000004, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, K2Node_Select_Default) == 0x000005, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated, K2Node_Select_Default_1) == 0x000008, "Member 'DailyChallengeStickyNoteWidget_C_HandleHasChallengeUpdated::K2Node_Select_Default_1' has a wrong offset!");

}

