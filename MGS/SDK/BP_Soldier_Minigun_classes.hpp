#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Soldier_Minigun

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AnimGraphRuntime_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass BP_Soldier_Minigun.BP_Soldier_Minigun_C
// 0x02D0 (0x0540 - 0x0270)
class UBP_Soldier_Minigun_C final : public UAnimInstance
{
public:
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0270(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0278(0x0030)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x02A8(0x0048)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x02F0(0x0108)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x03F8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0418(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0438(0x0048)()
	struct FAnimNode_RotateRootBone               AnimGraphNode_RotateRootBone;                      // 0x0480(0x00A0)()
	float                                         MinigunRotation;                                   // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxMinigunRotSpeed;                                // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LastChargingTime;                                  // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChargeTimeOverride;                                // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurDeltaTime;                                      // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurChargeTime;                                     // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Soldier_Minigun(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_BP_Soldier_Minigun_AnimGraphNode_ModifyBone_CDE861E049ED25F9468E1596307CE0F7();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void AnimGraph(struct FPoseLink* AnimGraph_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Soldier_Minigun_C">();
	}
	static class UBP_Soldier_Minigun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Soldier_Minigun_C>();
	}
};
static_assert(alignof(UBP_Soldier_Minigun_C) == 0x000010, "Wrong alignment on UBP_Soldier_Minigun_C");
static_assert(sizeof(UBP_Soldier_Minigun_C) == 0x000540, "Wrong size on UBP_Soldier_Minigun_C");
static_assert(offsetof(UBP_Soldier_Minigun_C, UberGraphFrame) == 0x000270, "Member 'UBP_Soldier_Minigun_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_Root) == 0x000278, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_Slot) == 0x0002A8, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_ModifyBone) == 0x0002F0, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_LocalToComponentSpace) == 0x0003F8, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_ComponentToLocalSpace) == 0x000418, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_SequenceEvaluator) == 0x000438, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, AnimGraphNode_RotateRootBone) == 0x000480, "Member 'UBP_Soldier_Minigun_C::AnimGraphNode_RotateRootBone' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, MinigunRotation) == 0x000520, "Member 'UBP_Soldier_Minigun_C::MinigunRotation' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, MaxMinigunRotSpeed) == 0x000524, "Member 'UBP_Soldier_Minigun_C::MaxMinigunRotSpeed' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, LastChargingTime) == 0x000528, "Member 'UBP_Soldier_Minigun_C::LastChargingTime' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, ChargeTimeOverride) == 0x00052C, "Member 'UBP_Soldier_Minigun_C::ChargeTimeOverride' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, CurDeltaTime) == 0x000530, "Member 'UBP_Soldier_Minigun_C::CurDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_Soldier_Minigun_C, CurChargeTime) == 0x000534, "Member 'UBP_Soldier_Minigun_C::CurChargeTime' has a wrong offset!");

}

