#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ColorSwatch

#include "Basic.hpp"


namespace SDK::Params
{

// Function ColorSwatch.ColorSwatch_C.ExecuteUbergraph_ColorSwatch
// 0x0030 (0x0030 - 0x0000)
struct ColorSwatch_C_ExecuteUbergraph_ColorSwatch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bInNullColor;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                K2Node_Event_ListItemObject;                       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsSelected;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsExpanded;                          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch) == 0x000008, "Wrong alignment on ColorSwatch_C_ExecuteUbergraph_ColorSwatch");
static_assert(sizeof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch) == 0x000030, "Wrong size on ColorSwatch_C_ExecuteUbergraph_ColorSwatch");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, EntryPoint) == 0x000000, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::EntryPoint' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, K2Node_Event_bInNullColor) == 0x000004, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::K2Node_Event_bInNullColor' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, K2Node_Event_ListItemObject) == 0x000018, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::K2Node_Event_ListItemObject' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000020, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, K2Node_Event_bIsSelected) == 0x000028, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::K2Node_Event_bIsSelected' has a wrong offset!");
static_assert(offsetof(ColorSwatch_C_ExecuteUbergraph_ColorSwatch, K2Node_Event_bIsExpanded) == 0x000029, "Member 'ColorSwatch_C_ExecuteUbergraph_ColorSwatch::K2Node_Event_bIsExpanded' has a wrong offset!");

// Function ColorSwatch.ColorSwatch_C.OnSwatchColorSet
// 0x0001 (0x0001 - 0x0000)
struct ColorSwatch_C_OnSwatchColorSet final
{
public:
	bool                                          bInNullColor;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorSwatch_C_OnSwatchColorSet) == 0x000001, "Wrong alignment on ColorSwatch_C_OnSwatchColorSet");
static_assert(sizeof(ColorSwatch_C_OnSwatchColorSet) == 0x000001, "Wrong size on ColorSwatch_C_OnSwatchColorSet");
static_assert(offsetof(ColorSwatch_C_OnSwatchColorSet, bInNullColor) == 0x000000, "Member 'ColorSwatch_C_OnSwatchColorSet::bInNullColor' has a wrong offset!");

// Function ColorSwatch.ColorSwatch_C.OnListItemObjectSet
// 0x0008 (0x0008 - 0x0000)
struct ColorSwatch_C_OnListItemObjectSet final
{
public:
	class UObject*                                ListItemObject;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ColorSwatch_C_OnListItemObjectSet) == 0x000008, "Wrong alignment on ColorSwatch_C_OnListItemObjectSet");
static_assert(sizeof(ColorSwatch_C_OnListItemObjectSet) == 0x000008, "Wrong size on ColorSwatch_C_OnListItemObjectSet");
static_assert(offsetof(ColorSwatch_C_OnListItemObjectSet, ListItemObject) == 0x000000, "Member 'ColorSwatch_C_OnListItemObjectSet::ListItemObject' has a wrong offset!");

// Function ColorSwatch.ColorSwatch_C.BP_OnItemSelectionChanged
// 0x0001 (0x0001 - 0x0000)
struct ColorSwatch_C_BP_OnItemSelectionChanged final
{
public:
	bool                                          bIsSelected;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorSwatch_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong alignment on ColorSwatch_C_BP_OnItemSelectionChanged");
static_assert(sizeof(ColorSwatch_C_BP_OnItemSelectionChanged) == 0x000001, "Wrong size on ColorSwatch_C_BP_OnItemSelectionChanged");
static_assert(offsetof(ColorSwatch_C_BP_OnItemSelectionChanged, bIsSelected) == 0x000000, "Member 'ColorSwatch_C_BP_OnItemSelectionChanged::bIsSelected' has a wrong offset!");

// Function ColorSwatch.ColorSwatch_C.BP_OnItemExpansionChanged
// 0x0001 (0x0001 - 0x0000)
struct ColorSwatch_C_BP_OnItemExpansionChanged final
{
public:
	bool                                          bIsExpanded;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ColorSwatch_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong alignment on ColorSwatch_C_BP_OnItemExpansionChanged");
static_assert(sizeof(ColorSwatch_C_BP_OnItemExpansionChanged) == 0x000001, "Wrong size on ColorSwatch_C_BP_OnItemExpansionChanged");
static_assert(offsetof(ColorSwatch_C_BP_OnItemExpansionChanged, bIsExpanded) == 0x000000, "Member 'ColorSwatch_C_BP_OnItemExpansionChanged::bIsExpanded' has a wrong offset!");

}

