#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Henchman_Intro

#include "Basic.hpp"


namespace SDK::Params
{

// Function Henchman_Intro.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0048 (0x0048 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFrontend_EventLevel_Camera_C*          K2Node_CustomEvent_Camera_Root_Movement;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bStreamIn;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_2; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_1; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AFrontend_EventLevel_Camera_C*          K2Node_CustomEvent_Camera_Root_Movement_1;         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bStreamIn_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000048, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Camera_Root_Movement) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Camera_Root_Movement' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bStreamIn) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bStreamIn' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_2) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Camera_Root_Movement_1) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Camera_Root_Movement_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_bStreamIn_1) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_bStreamIn_1' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.Camera_Root_Movement_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Camera_Root_Movement_Event_1 final
{
public:
	class AFrontend_EventLevel_Camera_C*          Camera_Root_Movement;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStreamIn;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_Camera_Root_Movement_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_Camera_Root_Movement_Event_1");
static_assert(sizeof(SequenceDirector_C_Camera_Root_Movement_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_Camera_Root_Movement_Event_1");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_1, Camera_Root_Movement) == 0x000000, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_1::Camera_Root_Movement' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_1, bStreamIn) == 0x000008, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_1::bStreamIn' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.Camera_Root_Movement_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_Camera_Root_Movement_Event_0 final
{
public:
	class AFrontend_EventLevel_Camera_C*          Camera_Root_Movement;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bStreamIn;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_Camera_Root_Movement_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_Camera_Root_Movement_Event_0");
static_assert(sizeof(SequenceDirector_C_Camera_Root_Movement_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_Camera_Root_Movement_Event_0");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_0, Camera_Root_Movement) == 0x000000, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_0::Camera_Root_Movement' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_Camera_Root_Movement_Event_0, bStreamIn) == 0x000008, "Member 'SequenceDirector_C_Camera_Root_Movement_Event_0::bStreamIn' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.BP_Battlepass_LightSwitcher_Hench_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_2::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.BP_Battlepass_LightSwitcher_Hench_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_1::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.BP_Battlepass_LightSwitcher_Hench_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class AFrontend_EventLevel_Camera_C*          Camera_Root_Movement;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, Camera_Root_Movement) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::Camera_Root_Movement' has a wrong offset!");

// Function Henchman_Intro.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class AFrontend_EventLevel_Camera_C*          Camera_Root_Movement;                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, Camera_Root_Movement) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::Camera_Root_Movement' has a wrong offset!");

}

