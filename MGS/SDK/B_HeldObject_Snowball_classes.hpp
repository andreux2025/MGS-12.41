#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: B_HeldObject_Snowball

#include "Basic.hpp"

#include "GameplayAbilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "BGA_HeldObject_Parent_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass B_HeldObject_Snowball.B_HeldObject_Snowball_C
// 0x00F0 (0x0A40 - 0x0950)
class AB_HeldObject_Snowball_C final : public ABGA_HeldObject_Parent_C
{
public:
	uint8                                         Pad_944[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_B_HeldObject_Snowball_C;            // 0x0948(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         DropAnimation_Z_Pos_888F8AB94C79F6A9DEB3149DDCAC3D72; // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            DropAnimation__Direction_888F8AB94C79F6A9DEB3149DDCAC3D72; // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     DropAnimation;                                     // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           SnowCheckTimer;                                    // 0x0968(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SnowballScale;                                     // 0x0970(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotationRate;                                      // 0x0974(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         StartZPos;                                         // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasThrown;                                         // 0x0984(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaterScaleMultiplier;                              // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AFortPlayerPawn*                        LastHolder;                                        // 0x0990(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Held;                                              // 0x0998(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScalableFloat                         PlayerDamageMultiplier;                            // 0x09A0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         EnvDamageMultiplier;                               // 0x09C0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         GrowingSpeed;                                      // 0x09E0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FScalableFloat                         MaxScale;                                          // 0x0A00(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                LastPosition;                                      // 0x0A20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Died;                                              // 0x0A2C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          WasJustThrown;                                     // 0x0A2D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DoneDropping;                                      // 0x0A2E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2F[0x1];                                      // 0x0A2F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ImpactNormal;                                      // 0x0A30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_B_HeldObject_Snowball(int32 EntryPoint);
	void BndEvt__FortLinkToActor_K2Node_ComponentBoundEvent_5_OnLinkedActorDisconnected__DelegateSignature();
	void Play_Drop_Animation();
	void OnDeathServer(float Damage, const struct FGameplayTagContainer& DamageTags, const struct FVector& Momentum, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser, const struct FGameplayEffectContextHandle& EffectContext);
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_1_OnHeldObjectThrown__DelegateSignature();
	void StopDropping();
	void BlowUp(class AFortPlayerPawn* LastHolder_0);
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_4_OnHeldObjectPickedUp__DelegateSignature();
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_3_OnHeldObjectPlaced__DelegateSignature();
	void BndEvt__FortHeldObject_K2Node_ComponentBoundEvent_2_OnHeldObjectDropped__DelegateSignature();
	void SetInstigator(class AFortPlayerPawn* Instigator_0);
	void EnterWater(class AFortWaterBodyActor* WaterBody, class UFortWaterInteractionComponent* WaterInteractionComponent, bool bIsFirstBody);
	void BlueprintOnInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted);
	void EventSnowballDeath(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void OnHit(class AActor* DamagedActor, float Damage, class AController* InstigatedBy, class AActor* DamageCauser, const struct FVector& HitLocation, class UPrimitiveComponent* FHitComponent, class FName BoneName, const struct FVector& Momentum);
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void DropAnimation__UpdateFunc();
	void DropAnimation__FinishedFunc();
	void FilterByLOS(TArray<class AActor*>& Array, TArray<class AActor*>* _Result);

	bool BlueprintCanInteract(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted, const ETInteractionType InteractionType) const;
	class FText BlueprintGetInteractionString(const class AFortPawn* InteractingPawn, const EInteractionBeingAttempted InteractionBeingAttempted) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"B_HeldObject_Snowball_C">();
	}
	static class AB_HeldObject_Snowball_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AB_HeldObject_Snowball_C>();
	}
};
static_assert(alignof(AB_HeldObject_Snowball_C) == 0x000010, "Wrong alignment on AB_HeldObject_Snowball_C");
static_assert(sizeof(AB_HeldObject_Snowball_C) == 0x000A40, "Wrong size on AB_HeldObject_Snowball_C");
static_assert(offsetof(AB_HeldObject_Snowball_C, UberGraphFrame_B_HeldObject_Snowball_C) == 0x000948, "Member 'AB_HeldObject_Snowball_C::UberGraphFrame_B_HeldObject_Snowball_C' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, StaticMesh) == 0x000950, "Member 'AB_HeldObject_Snowball_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, DropAnimation_Z_Pos_888F8AB94C79F6A9DEB3149DDCAC3D72) == 0x000958, "Member 'AB_HeldObject_Snowball_C::DropAnimation_Z_Pos_888F8AB94C79F6A9DEB3149DDCAC3D72' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, DropAnimation__Direction_888F8AB94C79F6A9DEB3149DDCAC3D72) == 0x00095C, "Member 'AB_HeldObject_Snowball_C::DropAnimation__Direction_888F8AB94C79F6A9DEB3149DDCAC3D72' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, DropAnimation) == 0x000960, "Member 'AB_HeldObject_Snowball_C::DropAnimation' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, SnowCheckTimer) == 0x000968, "Member 'AB_HeldObject_Snowball_C::SnowCheckTimer' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, SnowballScale) == 0x000970, "Member 'AB_HeldObject_Snowball_C::SnowballScale' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, RotationRate) == 0x000974, "Member 'AB_HeldObject_Snowball_C::RotationRate' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, StartZPos) == 0x000980, "Member 'AB_HeldObject_Snowball_C::StartZPos' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, WasThrown) == 0x000984, "Member 'AB_HeldObject_Snowball_C::WasThrown' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, WaterScaleMultiplier) == 0x000988, "Member 'AB_HeldObject_Snowball_C::WaterScaleMultiplier' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, LastHolder) == 0x000990, "Member 'AB_HeldObject_Snowball_C::LastHolder' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, Held) == 0x000998, "Member 'AB_HeldObject_Snowball_C::Held' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, PlayerDamageMultiplier) == 0x0009A0, "Member 'AB_HeldObject_Snowball_C::PlayerDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, EnvDamageMultiplier) == 0x0009C0, "Member 'AB_HeldObject_Snowball_C::EnvDamageMultiplier' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, GrowingSpeed) == 0x0009E0, "Member 'AB_HeldObject_Snowball_C::GrowingSpeed' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, MaxScale) == 0x000A00, "Member 'AB_HeldObject_Snowball_C::MaxScale' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, LastPosition) == 0x000A20, "Member 'AB_HeldObject_Snowball_C::LastPosition' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, Died) == 0x000A2C, "Member 'AB_HeldObject_Snowball_C::Died' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, WasJustThrown) == 0x000A2D, "Member 'AB_HeldObject_Snowball_C::WasJustThrown' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, DoneDropping) == 0x000A2E, "Member 'AB_HeldObject_Snowball_C::DoneDropping' has a wrong offset!");
static_assert(offsetof(AB_HeldObject_Snowball_C, ImpactNormal) == 0x000A30, "Member 'AB_HeldObject_Snowball_C::ImpactNormal' has a wrong offset!");

}

