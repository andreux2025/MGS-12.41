#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Water

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Niagara_classes.hpp"
#include "Water_structs.hpp"


namespace SDK
{

// Class Water.LakeCollisionComponent
// 0x0010 (0x0400 - 0x03F0)
class ULakeCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtent;                                         // 0x03F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeCollisionComponent">();
	}
	static class ULakeCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeCollisionComponent>();
	}
};
static_assert(alignof(ULakeCollisionComponent) == 0x000010, "Wrong alignment on ULakeCollisionComponent");
static_assert(sizeof(ULakeCollisionComponent) == 0x000400, "Wrong size on ULakeCollisionComponent");
static_assert(offsetof(ULakeCollisionComponent, CachedBodySetup) == 0x0003E8, "Member 'ULakeCollisionComponent::CachedBodySetup' has a wrong offset!");
static_assert(offsetof(ULakeCollisionComponent, BoxExtent) == 0x0003F0, "Member 'ULakeCollisionComponent::BoxExtent' has a wrong offset!");

// Class Water.NiagaraDataInterfaceWater
// 0x0008 (0x0038 - 0x0030)
class UNiagaraDataInterfaceWater final : public UNiagaraDataInterface
{
public:
	class AWaterBody*                             SourceBody;                                        // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceWater">();
	}
	static class UNiagaraDataInterfaceWater* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceWater>();
	}
};
static_assert(alignof(UNiagaraDataInterfaceWater) == 0x000008, "Wrong alignment on UNiagaraDataInterfaceWater");
static_assert(sizeof(UNiagaraDataInterfaceWater) == 0x000038, "Wrong size on UNiagaraDataInterfaceWater");
static_assert(offsetof(UNiagaraDataInterfaceWater, SourceBody) == 0x000030, "Member 'UNiagaraDataInterfaceWater::SourceBody' has a wrong offset!");

// Class Water.NiagaraWaterFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UNiagaraWaterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetWaterBody(class UNiagaraComponent* NiagaraSystem, const class FString& OverrideName, class AWaterBody* WaterBody);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraWaterFunctionLibrary">();
	}
	static class UNiagaraWaterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraWaterFunctionLibrary>();
	}
};
static_assert(alignof(UNiagaraWaterFunctionLibrary) == 0x000008, "Wrong alignment on UNiagaraWaterFunctionLibrary");
static_assert(sizeof(UNiagaraWaterFunctionLibrary) == 0x000028, "Wrong size on UNiagaraWaterFunctionLibrary");

// Class Water.WaterBodyGenerator
// 0x0000 (0x0028 - 0x0028)
class UWaterBodyGenerator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyGenerator">();
	}
	static class UWaterBodyGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterBodyGenerator>();
	}
};
static_assert(alignof(UWaterBodyGenerator) == 0x000008, "Wrong alignment on UWaterBodyGenerator");
static_assert(sizeof(UWaterBodyGenerator) == 0x000028, "Wrong size on UWaterBodyGenerator");

// Class Water.RiverGenerator
// 0x0028 (0x0050 - 0x0028)
class URiverGenerator final : public UWaterBodyGenerator
{
public:
	TSoftObjectPtr<class UStaticMesh>             RiverMesh;                                         // 0x0028(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RiverGenerator">();
	}
	static class URiverGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URiverGenerator>();
	}
};
static_assert(alignof(URiverGenerator) == 0x000008, "Wrong alignment on URiverGenerator");
static_assert(sizeof(URiverGenerator) == 0x000050, "Wrong size on URiverGenerator");
static_assert(offsetof(URiverGenerator, RiverMesh) == 0x000028, "Member 'URiverGenerator::RiverMesh' has a wrong offset!");

// Class Water.LakeGenerator
// 0x0040 (0x0068 - 0x0028)
class ULakeGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   LakeMeshComp;                                      // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          LakeCollisionComp;                                 // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULakeCollisionComponent*                LakeCollision;                                     // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UStaticMesh>             LakeMesh;                                          // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LakeGenerator">();
	}
	static class ULakeGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULakeGenerator>();
	}
};
static_assert(alignof(ULakeGenerator) == 0x000008, "Wrong alignment on ULakeGenerator");
static_assert(sizeof(ULakeGenerator) == 0x000068, "Wrong size on ULakeGenerator");
static_assert(offsetof(ULakeGenerator, LakeMeshComp) == 0x000028, "Member 'ULakeGenerator::LakeMeshComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollisionComp) == 0x000030, "Member 'ULakeGenerator::LakeCollisionComp' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeCollision) == 0x000038, "Member 'ULakeGenerator::LakeCollision' has a wrong offset!");
static_assert(offsetof(ULakeGenerator, LakeMesh) == 0x000040, "Member 'ULakeGenerator::LakeMesh' has a wrong offset!");

// Class Water.OceanGenerator
// 0x0008 (0x0030 - 0x0028)
class UOceanGenerator final : public UWaterBodyGenerator
{
public:
	class UBoxComponent*                          OceanCollision;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OceanGenerator">();
	}
	static class UOceanGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOceanGenerator>();
	}
};
static_assert(alignof(UOceanGenerator) == 0x000008, "Wrong alignment on UOceanGenerator");
static_assert(sizeof(UOceanGenerator) == 0x000030, "Wrong size on UOceanGenerator");
static_assert(offsetof(UOceanGenerator, OceanCollision) == 0x000028, "Member 'UOceanGenerator::OceanCollision' has a wrong offset!");

// Class Water.CustomMeshGenerator
// 0x0008 (0x0030 - 0x0028)
class UCustomMeshGenerator final : public UWaterBodyGenerator
{
public:
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomMeshGenerator">();
	}
	static class UCustomMeshGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomMeshGenerator>();
	}
};
static_assert(alignof(UCustomMeshGenerator) == 0x000008, "Wrong alignment on UCustomMeshGenerator");
static_assert(sizeof(UCustomMeshGenerator) == 0x000030, "Wrong size on UCustomMeshGenerator");
static_assert(offsetof(UCustomMeshGenerator, MeshComp) == 0x000028, "Member 'UCustomMeshGenerator::MeshComp' has a wrong offset!");

// Class Water.WaterBody
// 0x0658 (0x0870 - 0x0218)
class AWaterBody : public AActor
{
public:
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CollisionComponents;                               // 0x0220(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0230(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FWaterWaveParams>               WaveParams;                                        // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         WaveSpeedFactor;                                   // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetWaveMaskDepth;                               // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveParamTextureOffset;                            // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillCollisionUnderWaterBodiesForNavmesh;          // 0x0254(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaterBodyType                                WaterBodyType;                                     // 0x0255(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideWaterMesh;                                // 0x0256(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_257[0x1];                                      // 0x0257(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            WaterMeshOverride;                                 // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     WaterMaterial;                                     // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     RiverToLakeTransitionMat;                          // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     RiverToOceanTransitionMat;                         // 0x0270(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OverlapMaterialPriority;                           // 0x0278(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CollisionProfileName;                              // 0x027C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                OceanCollisionExtents;                             // 0x0284(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWaveHeight;                                     // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0xC];                                      // 0x0294(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUnderwaterPostProcessSettings         UnderwaterPostProcessSettings;                     // 0x02A0(0x0550)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UWaterSplineComponent*                  SplineComp;                                        // 0x07F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FWaterCurveSettings                    CurveSettings;                                     // 0x07F8(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAffectsLandscape;                                 // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_819[0x7];                                      // 0x0819(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWaterBodyGenerator*                    Generator;                                         // 0x0820(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWaterSplineMetadata*                   WaterSplineMetadata;                               // 0x0828(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               WaterMaterialInstance;                             // 0x0830(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               RiverToLakeTransitionMID;                          // 0x0838(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               RiverToOceanTransitionMID;                         // 0x0840(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TLazyObjectPtr<class AWaterBodyIsland>> Islands;                                           // 0x0848(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, AdvancedDisplay, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class ALandscapeProxy>         Landscape;                                         // 0x0858(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanAffectNavigation;                              // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UNavAreaBase>               WaterNavAreaClass;                                 // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMaterialInstanceDynamic* GetRiverToLakeTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetRiverToOceanTransitionMaterialInstance();
	class UMaterialInstanceDynamic* GetWaterMaterialInstance();
	void OnWaterBodyChanged(bool bShapeOrPositionChanged, bool bWeightmapSettingsChanged);
	void OnWaterBodyFinishedUpdating();

	TArray<class AWaterBodyIsland*> GetIslands() const;
	TArray<class UStaticMeshComponent*> GetWaterMeshComponents() const;
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBody">();
	}
	static class AWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBody>();
	}
};
static_assert(alignof(AWaterBody) == 0x000010, "Wrong alignment on AWaterBody");
static_assert(sizeof(AWaterBody) == 0x000870, "Wrong size on AWaterBody");
static_assert(offsetof(AWaterBody, CollisionComponents) == 0x000220, "Member 'AWaterBody::CollisionComponents' has a wrong offset!");
static_assert(offsetof(AWaterBody, PhysicalMaterial) == 0x000230, "Member 'AWaterBody::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveParams) == 0x000238, "Member 'AWaterBody::WaveParams' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveSpeedFactor) == 0x000248, "Member 'AWaterBody::WaveSpeedFactor' has a wrong offset!");
static_assert(offsetof(AWaterBody, TargetWaveMaskDepth) == 0x00024C, "Member 'AWaterBody::TargetWaveMaskDepth' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaveParamTextureOffset) == 0x000250, "Member 'AWaterBody::WaveParamTextureOffset' has a wrong offset!");
static_assert(offsetof(AWaterBody, bFillCollisionUnderWaterBodiesForNavmesh) == 0x000254, "Member 'AWaterBody::bFillCollisionUnderWaterBodiesForNavmesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterBodyType) == 0x000255, "Member 'AWaterBody::WaterBodyType' has a wrong offset!");
static_assert(offsetof(AWaterBody, bOverrideWaterMesh) == 0x000256, "Member 'AWaterBody::bOverrideWaterMesh' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMeshOverride) == 0x000258, "Member 'AWaterBody::WaterMeshOverride' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMaterial) == 0x000260, "Member 'AWaterBody::WaterMaterial' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToLakeTransitionMat) == 0x000268, "Member 'AWaterBody::RiverToLakeTransitionMat' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToOceanTransitionMat) == 0x000270, "Member 'AWaterBody::RiverToOceanTransitionMat' has a wrong offset!");
static_assert(offsetof(AWaterBody, OverlapMaterialPriority) == 0x000278, "Member 'AWaterBody::OverlapMaterialPriority' has a wrong offset!");
static_assert(offsetof(AWaterBody, CollisionProfileName) == 0x00027C, "Member 'AWaterBody::CollisionProfileName' has a wrong offset!");
static_assert(offsetof(AWaterBody, OceanCollisionExtents) == 0x000284, "Member 'AWaterBody::OceanCollisionExtents' has a wrong offset!");
static_assert(offsetof(AWaterBody, MaxWaveHeight) == 0x000290, "Member 'AWaterBody::MaxWaveHeight' has a wrong offset!");
static_assert(offsetof(AWaterBody, UnderwaterPostProcessSettings) == 0x0002A0, "Member 'AWaterBody::UnderwaterPostProcessSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, SplineComp) == 0x0007F0, "Member 'AWaterBody::SplineComp' has a wrong offset!");
static_assert(offsetof(AWaterBody, CurveSettings) == 0x0007F8, "Member 'AWaterBody::CurveSettings' has a wrong offset!");
static_assert(offsetof(AWaterBody, bAffectsLandscape) == 0x000818, "Member 'AWaterBody::bAffectsLandscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, Generator) == 0x000820, "Member 'AWaterBody::Generator' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterSplineMetadata) == 0x000828, "Member 'AWaterBody::WaterSplineMetadata' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterMaterialInstance) == 0x000830, "Member 'AWaterBody::WaterMaterialInstance' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToLakeTransitionMID) == 0x000838, "Member 'AWaterBody::RiverToLakeTransitionMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, RiverToOceanTransitionMID) == 0x000840, "Member 'AWaterBody::RiverToOceanTransitionMID' has a wrong offset!");
static_assert(offsetof(AWaterBody, Islands) == 0x000848, "Member 'AWaterBody::Islands' has a wrong offset!");
static_assert(offsetof(AWaterBody, Landscape) == 0x000858, "Member 'AWaterBody::Landscape' has a wrong offset!");
static_assert(offsetof(AWaterBody, bCanAffectNavigation) == 0x000860, "Member 'AWaterBody::bCanAffectNavigation' has a wrong offset!");
static_assert(offsetof(AWaterBody, WaterNavAreaClass) == 0x000868, "Member 'AWaterBody::WaterNavAreaClass' has a wrong offset!");

// Class Water.WaterBodyIsland
// 0x0008 (0x0220 - 0x0218)
class AWaterBodyIsland : public AActor
{
public:
	class UWaterSplineComponent*                  SplineComp;                                        // 0x0218(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UWaterSplineComponent* GetWaterSpline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyIsland">();
	}
	static class AWaterBodyIsland* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyIsland>();
	}
};
static_assert(alignof(AWaterBodyIsland) == 0x000008, "Wrong alignment on AWaterBodyIsland");
static_assert(sizeof(AWaterBodyIsland) == 0x000220, "Wrong size on AWaterBodyIsland");
static_assert(offsetof(AWaterBodyIsland, SplineComp) == 0x000218, "Member 'AWaterBodyIsland::SplineComp' has a wrong offset!");

// Class Water.WaterBodyProxy
// 0x0000 (0x0218 - 0x0218)
class AWaterBodyProxy final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterBodyProxy">();
	}
	static class AWaterBodyProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterBodyProxy>();
	}
};
static_assert(alignof(AWaterBodyProxy) == 0x000008, "Wrong alignment on AWaterBodyProxy");
static_assert(sizeof(AWaterBodyProxy) == 0x000218, "Wrong size on AWaterBodyProxy");

// Class Water.WaterMeshActor
// 0x0010 (0x0228 - 0x0218)
class AWaterMeshActor final : public AActor
{
public:
	class UTexture2D*                             WaterVelocityTexture;                              // 0x0218(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWaterMeshComponent*                    WaterMesh;                                         // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshActor">();
	}
	static class AWaterMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterMeshActor>();
	}
};
static_assert(alignof(AWaterMeshActor) == 0x000008, "Wrong alignment on AWaterMeshActor");
static_assert(sizeof(AWaterMeshActor) == 0x000228, "Wrong size on AWaterMeshActor");
static_assert(offsetof(AWaterMeshActor, WaterVelocityTexture) == 0x000218, "Member 'AWaterMeshActor::WaterVelocityTexture' has a wrong offset!");
static_assert(offsetof(AWaterMeshActor, WaterMesh) == 0x000220, "Member 'AWaterMeshActor::WaterMesh' has a wrong offset!");

// Class Water.WaterMeshComponent
// 0x0110 (0x0520 - 0x0410)
class UWaterMeshComponent final : public UMeshComponent
{
public:
	int32                                         ForceCollapseDensityLevel;                         // 0x0410(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TileSize;                                          // 0x0414(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ExtentInTiles;                                     // 0x0418(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     FarDistanceMaterial;                               // 0x0420(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FarDistanceMeshExtent;                             // 0x0428(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42C[0xE4];                                     // 0x042C(0x00E4)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TessellationFactor;                                // 0x0510(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LODScale;                                          // 0x0514(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterMeshComponent">();
	}
	static class UWaterMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterMeshComponent>();
	}
};
static_assert(alignof(UWaterMeshComponent) == 0x000010, "Wrong alignment on UWaterMeshComponent");
static_assert(sizeof(UWaterMeshComponent) == 0x000520, "Wrong size on UWaterMeshComponent");
static_assert(offsetof(UWaterMeshComponent, ForceCollapseDensityLevel) == 0x000410, "Member 'UWaterMeshComponent::ForceCollapseDensityLevel' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TileSize) == 0x000414, "Member 'UWaterMeshComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, ExtentInTiles) == 0x000418, "Member 'UWaterMeshComponent::ExtentInTiles' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMaterial) == 0x000420, "Member 'UWaterMeshComponent::FarDistanceMaterial' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, FarDistanceMeshExtent) == 0x000428, "Member 'UWaterMeshComponent::FarDistanceMeshExtent' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, TessellationFactor) == 0x000510, "Member 'UWaterMeshComponent::TessellationFactor' has a wrong offset!");
static_assert(offsetof(UWaterMeshComponent, LODScale) == 0x000514, "Member 'UWaterMeshComponent::LODScale' has a wrong offset!");

// Class Water.WaterRuntimeSettings
// 0x0008 (0x0040 - 0x0038)
class UWaterRuntimeSettings final : public UDeveloperSettings
{
public:
	ECollisionChannel                             CollisionChannelForWaterTraces;                    // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterRuntimeSettings">();
	}
	static class UWaterRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterRuntimeSettings>();
	}
};
static_assert(alignof(UWaterRuntimeSettings) == 0x000008, "Wrong alignment on UWaterRuntimeSettings");
static_assert(sizeof(UWaterRuntimeSettings) == 0x000040, "Wrong size on UWaterRuntimeSettings");
static_assert(offsetof(UWaterRuntimeSettings, CollisionChannelForWaterTraces) == 0x000038, "Member 'UWaterRuntimeSettings::CollisionChannelForWaterTraces' has a wrong offset!");

// Class Water.WaterSplineComponent
// 0x0020 (0x0500 - 0x04E0)
class UWaterSplineComponent final : public USplineComponent
{
public:
	struct FWaterSplineCurveDefaults              WaterSplineDefaults;                               // 0x04D8(0x0014)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FWaterSplineCurveDefaults              PreviousWaterSplineDefaults;                       // 0x04EC(0x0014)(NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineComponent">();
	}
	static class UWaterSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineComponent>();
	}
};
static_assert(alignof(UWaterSplineComponent) == 0x000010, "Wrong alignment on UWaterSplineComponent");
static_assert(sizeof(UWaterSplineComponent) == 0x000500, "Wrong size on UWaterSplineComponent");
static_assert(offsetof(UWaterSplineComponent, WaterSplineDefaults) == 0x0004D8, "Member 'UWaterSplineComponent::WaterSplineDefaults' has a wrong offset!");
static_assert(offsetof(UWaterSplineComponent, PreviousWaterSplineDefaults) == 0x0004EC, "Member 'UWaterSplineComponent::PreviousWaterSplineDefaults' has a wrong offset!");

// Class Water.WaterSplineMetadata
// 0x0090 (0x00B8 - 0x0028)
class UWaterSplineMetadata final : public USplineMetadata
{
public:
	struct FInterpCurveFloat                      Depth;                                             // 0x0028(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      WaterVelocityScalar;                               // 0x0040(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      ShorelineWidth;                                    // 0x0058(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      RiverWidth;                                        // 0x0070(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveFloat                      AudioIntensity;                                    // 0x0088(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInterpCurveVector                     WaterVelocity;                                     // 0x00A0(0x0018)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSplineMetadata">();
	}
	static class UWaterSplineMetadata* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSplineMetadata>();
	}
};
static_assert(alignof(UWaterSplineMetadata) == 0x000008, "Wrong alignment on UWaterSplineMetadata");
static_assert(sizeof(UWaterSplineMetadata) == 0x0000B8, "Wrong size on UWaterSplineMetadata");
static_assert(offsetof(UWaterSplineMetadata, Depth) == 0x000028, "Member 'UWaterSplineMetadata::Depth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocityScalar) == 0x000040, "Member 'UWaterSplineMetadata::WaterVelocityScalar' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, ShorelineWidth) == 0x000058, "Member 'UWaterSplineMetadata::ShorelineWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, RiverWidth) == 0x000070, "Member 'UWaterSplineMetadata::RiverWidth' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, AudioIntensity) == 0x000088, "Member 'UWaterSplineMetadata::AudioIntensity' has a wrong offset!");
static_assert(offsetof(UWaterSplineMetadata, WaterVelocity) == 0x0000A0, "Member 'UWaterSplineMetadata::WaterVelocity' has a wrong offset!");

// Class Water.WaterSubsystem
// 0x0070 (0x00A0 - 0x0030)
class UWaterSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCameraUnderwaterStateChanged;                    // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWaterScalabilityChanged;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AWaterMeshActor*                        WaterMeshActor;                                    // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialParameterCollection*           MaterialParameterCollection;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int32 GetShallowWaterMaxDynamicForces();
	static int32 GetShallowWaterMaxImpulseForces();
	static int32 GetShallowWaterSimulationRenderTargetSize();

	void PrintToWaterLog(const class FString& Message, bool bWarning);

	float GetCameraUnderwaterDepth() const;
	float GetSmoothedWorldTimeSeconds() const;
	bool IsShallowWaterSimulationEnabled() const;
	bool IsUnderwaterPostProcessEnabled() const;
	bool IsWaterRenderingEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterSubsystem">();
	}
	static class UWaterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterSubsystem>();
	}
};
static_assert(alignof(UWaterSubsystem) == 0x000008, "Wrong alignment on UWaterSubsystem");
static_assert(sizeof(UWaterSubsystem) == 0x0000A0, "Wrong size on UWaterSubsystem");
static_assert(offsetof(UWaterSubsystem, OnCameraUnderwaterStateChanged) == 0x000038, "Member 'UWaterSubsystem::OnCameraUnderwaterStateChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, OnWaterScalabilityChanged) == 0x000048, "Member 'UWaterSubsystem::OnWaterScalabilityChanged' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, WaterMeshActor) == 0x000058, "Member 'UWaterSubsystem::WaterMeshActor' has a wrong offset!");
static_assert(offsetof(UWaterSubsystem, MaterialParameterCollection) == 0x000078, "Member 'UWaterSubsystem::MaterialParameterCollection' has a wrong offset!");

}

