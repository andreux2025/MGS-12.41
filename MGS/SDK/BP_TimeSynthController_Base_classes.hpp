#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TimeSynthController_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "TimeSynth_structs.hpp"
#include "TimeSynth_TrackPlayStates_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TimeSynthController_Base.BP_TimeSynthController_Base_C
// 0x0060 (0x0278 - 0x0218)
class ABP_TimeSynthController_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0218(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTimeSynthComponent*                    TimeSynth;                                         // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TimeSynthTrackComponent_C*          CurrentTrack;                                      // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TransitionBeats;                                   // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitionActive;                                  // 0x0234(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TimeSynthTrackComponent_C*          QueuedTransitionTrack;                             // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UTimeSynthVolumeGroup*>          VolumeGroups;                                      // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTimeSynthClipHandle>           QueuedTransitions;                                 // 0x0250(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class UBP_TimeSynthTrackComponent_C*>  QueuedTracks;                                      // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsPlaying;                                         // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Debug;                                             // 0x0271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_TimeSynthController_Base(int32 EntryPoint);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void BndEvt__BP_TimeSynthTrackComponent_Alerted_K2Node_ComponentBoundEvent_2_OnPlayStateChanged__DelegateSignature(ETimeSynth_TrackPlayStates Previous, ETimeSynth_TrackPlayStates New);
	void BndEvt__BP_TimeSynthTrackComponent_Suspicious_K2Node_ComponentBoundEvent_1_OnPlayStateChanged__DelegateSignature(ETimeSynth_TrackPlayStates Previous, ETimeSynth_TrackPlayStates New);
	void SetVolumeGroup(int32 Index_0, float Volume_Multiplier);
	void BndEvt__BP_TimeSynthTrackComponent_Infiltration_K2Node_ComponentBoundEvent_0_OnPlayStateChanged__DelegateSignature(ETimeSynth_TrackPlayStates Previous, ETimeSynth_TrackPlayStates New);
	void OnReady_CB064A4141A4B166152154812676A378();
	void ChangeTrack(class UBP_TimeSynthTrackComponent_C* New_Track);
	void StopAllMusic(bool Play_Outro);
	void PlayTransition(const struct FTimeSynth_TransitionData& Transition_Data, class UBP_TimeSynthTrackComponent_C* Queued_Track);
	void OnQuantizationBeat(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void FlushExtraClips(bool Exclude_Current);
	void OnQuantizationBar(ETimeSynthEventQuantization QuantizationType, int32 NumBars, float Beat);
	void QueueTrackStartInternal(class UBP_TimeSynthTrackComponent_C* NewTrack);
	void CalculateMaxClipDuration(TArray<struct FTimeSynth_TrackStemData>& Clips, int32* Duration);
	void GetTracksForRegistration(TArray<class UBP_TimeSynthTrackComponent_C*>* Tracks);
	void GetIsPlaying(bool* IsPlaying_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TimeSynthController_Base_C">();
	}
	static class ABP_TimeSynthController_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TimeSynthController_Base_C>();
	}
};
static_assert(alignof(ABP_TimeSynthController_Base_C) == 0x000008, "Wrong alignment on ABP_TimeSynthController_Base_C");
static_assert(sizeof(ABP_TimeSynthController_Base_C) == 0x000278, "Wrong size on ABP_TimeSynthController_Base_C");
static_assert(offsetof(ABP_TimeSynthController_Base_C, UberGraphFrame) == 0x000218, "Member 'ABP_TimeSynthController_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TimeSynth) == 0x000220, "Member 'ABP_TimeSynthController_Base_C::TimeSynth' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, CurrentTrack) == 0x000228, "Member 'ABP_TimeSynthController_Base_C::CurrentTrack' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TransitionBeats) == 0x000230, "Member 'ABP_TimeSynthController_Base_C::TransitionBeats' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, TransitionActive) == 0x000234, "Member 'ABP_TimeSynthController_Base_C::TransitionActive' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTransitionTrack) == 0x000238, "Member 'ABP_TimeSynthController_Base_C::QueuedTransitionTrack' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, VolumeGroups) == 0x000240, "Member 'ABP_TimeSynthController_Base_C::VolumeGroups' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTransitions) == 0x000250, "Member 'ABP_TimeSynthController_Base_C::QueuedTransitions' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, QueuedTracks) == 0x000260, "Member 'ABP_TimeSynthController_Base_C::QueuedTracks' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, IsPlaying) == 0x000270, "Member 'ABP_TimeSynthController_Base_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_TimeSynthController_Base_C, Debug) == 0x000271, "Member 'ABP_TimeSynthController_Base_C::Debug' has a wrong offset!");

}

