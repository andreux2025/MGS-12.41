#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SafeZoneIndicator

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteGame_structs.hpp"
#include "FortniteGame_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass SafeZoneIndicator.SafeZoneIndicator_C
// 0x0148 (0x05A8 - 0x0460)
class ASafeZoneIndicator_C final : public AFortSafeZoneIndicator
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0460(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   BP_StormMeshRotator;                               // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C; // 0x0470(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C; // 0x0474(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_475[0x3];                                      // 0x0475(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Pre_Damage_Audio_Ramp;                             // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C; // 0x0480(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C; // 0x0484(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_485[0x3];                                      // 0x0485(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     StormFadeTimeline;                                 // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ShieldBoundaryLoopSound;                           // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HoldingLoopSound;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HoldingStartTime_0;                                // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HoldingLoopTickSound;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               SafeZoneMID;                                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           MegaStormDamageTimer;                              // 0x04B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         MegastormAudioDuration;                            // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSafeZoneStateChangeDispatcher;                   // 0x04C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector                                CloudOffsetStart;                                  // 0x04D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CloudScale;                                        // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseRotation;                                   // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4F1[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CloudOffsetEnd;                                    // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StormRotation;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFortSafeZoneState                            SafeZoneState;                                     // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EFortSafeZoneState, struct FVector2D>    SafeZoneStateThunderFreqs;                         // 0x0508(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<EFortSafeZoneState, float>               SafeZoneStateThunderDuration;                      // 0x0558(0x0050)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

public:
	void OnSafeZoneStateChangeDispatcher__DelegateSignature(EFortSafeZoneState SafeZoneState_0);
	void ExecuteUbergraph_SafeZoneIndicator(int32 EntryPoint);
	void ReceiveBeginPlay();
	void OnSafeZoneStateChange(EFortSafeZoneState NewState, bool bInitial);
	void ResetSafeZoneScale();
	void Stop_Distant_Storm_Oneshots();
	void Trigger_Distant_Storm_Oneshot();
	void Play_Storm_Grow_Audio();
	void ReceiveTick(float DeltaSeconds);
	void Start_Megastorm_Audio();
	void Megastorm_Pre_Damage_Tell();
	void OnBeginStartingStateEffectsEvent();
	void ReceiveDestroyed();
	void Stormy(float NewParam);
	void StormFadeTimeline__UpdateFunc();
	void StormFadeTimeline__FinishedFunc();
	void Pre_Damage_Audio_Ramp__UpdateFunc();
	void Pre_Damage_Audio_Ramp__FinishedFunc();
	void UserConstructionScript();
	void InitClosestPointAudio();
	void HandleInsideOutsideMix();
	void GetAthenaGameState(class AAthena_GameState_C** AthenaGS);
	void GetRandomPointOnBoundary(struct FVector* Position);
	void GetRandomPointInPlayerDir(struct FVector* Position);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SafeZoneIndicator_C">();
	}
	static class ASafeZoneIndicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASafeZoneIndicator_C>();
	}
};
static_assert(alignof(ASafeZoneIndicator_C) == 0x000008, "Wrong alignment on ASafeZoneIndicator_C");
static_assert(sizeof(ASafeZoneIndicator_C) == 0x0005A8, "Wrong size on ASafeZoneIndicator_C");
static_assert(offsetof(ASafeZoneIndicator_C, UberGraphFrame) == 0x000460, "Member 'ASafeZoneIndicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, BP_StormMeshRotator) == 0x000468, "Member 'ASafeZoneIndicator_C::BP_StormMeshRotator' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C) == 0x000470, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp_Intensity_05A077AD4FED08F2426E5CA16BD41D7C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C) == 0x000474, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp__Direction_05A077AD4FED08F2426E5CA16BD41D7C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, Pre_Damage_Audio_Ramp) == 0x000478, "Member 'ASafeZoneIndicator_C::Pre_Damage_Audio_Ramp' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C) == 0x000480, "Member 'ASafeZoneIndicator_C::StormFadeTimeline_StormFadeIn_6FB75EFB416FB419D85F8797DEDD058C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C) == 0x000484, "Member 'ASafeZoneIndicator_C::StormFadeTimeline__Direction_6FB75EFB416FB419D85F8797DEDD058C' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormFadeTimeline) == 0x000488, "Member 'ASafeZoneIndicator_C::StormFadeTimeline' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, ShieldBoundaryLoopSound) == 0x000490, "Member 'ASafeZoneIndicator_C::ShieldBoundaryLoopSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingLoopSound) == 0x000498, "Member 'ASafeZoneIndicator_C::HoldingLoopSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingStartTime_0) == 0x0004A0, "Member 'ASafeZoneIndicator_C::HoldingStartTime_0' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, HoldingLoopTickSound) == 0x0004A8, "Member 'ASafeZoneIndicator_C::HoldingLoopTickSound' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneMID) == 0x0004B0, "Member 'ASafeZoneIndicator_C::SafeZoneMID' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, MegaStormDamageTimer) == 0x0004B8, "Member 'ASafeZoneIndicator_C::MegaStormDamageTimer' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, MegastormAudioDuration) == 0x0004C0, "Member 'ASafeZoneIndicator_C::MegastormAudioDuration' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, OnSafeZoneStateChangeDispatcher) == 0x0004C8, "Member 'ASafeZoneIndicator_C::OnSafeZoneStateChangeDispatcher' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, CloudOffsetStart) == 0x0004D8, "Member 'ASafeZoneIndicator_C::CloudOffsetStart' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, CloudScale) == 0x0004E4, "Member 'ASafeZoneIndicator_C::CloudScale' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, ReverseRotation) == 0x0004F0, "Member 'ASafeZoneIndicator_C::ReverseRotation' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, CloudOffsetEnd) == 0x0004F4, "Member 'ASafeZoneIndicator_C::CloudOffsetEnd' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, StormRotation) == 0x000500, "Member 'ASafeZoneIndicator_C::StormRotation' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneState) == 0x000504, "Member 'ASafeZoneIndicator_C::SafeZoneState' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneStateThunderFreqs) == 0x000508, "Member 'ASafeZoneIndicator_C::SafeZoneStateThunderFreqs' has a wrong offset!");
static_assert(offsetof(ASafeZoneIndicator_C, SafeZoneStateThunderDuration) == 0x000558, "Member 'ASafeZoneIndicator_C::SafeZoneStateThunderDuration' has a wrong offset!");

}

