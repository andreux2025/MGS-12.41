#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeScreen

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function ChallengeScreen.ChallengeScreen_C.ExecuteUbergraph_ChallengeScreen
// 0x0048 (0x0048 - 0x0000)
struct ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortFrontEndContext*                   CallFunc_GetContext_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPartyAssistedChallengeSet_ReturnValue;  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool* bPassThrough)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen) == 0x000008, "Wrong alignment on ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen");
static_assert(sizeof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen) == 0x000048, "Wrong size on ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, EntryPoint) == 0x000000, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, CallFunc_GetContext_ReturnValue) == 0x000018, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::CallFunc_GetContext_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, CallFunc_PlayAnimationForward_ReturnValue) == 0x000020, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, CallFunc_IsPartyAssistedChallengeSet_ReturnValue) == 0x000028, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::CallFunc_IsPartyAssistedChallengeSet_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen, CallFunc_GetRuntimeOptions_ReturnValue) == 0x000040, "Member 'ChallengeScreen_C_ExecuteUbergraph_ChallengeScreen::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");

// Function ChallengeScreen.ChallengeScreen_C.PlayHolidayCinematic
// 0x0088 (0x0088 - 0x0000)
struct ChallengeScreen_C_PlayHolidayCinematic final
{
public:
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue;            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFortRuntimeOptions*                    CallFunc_GetRuntimeOptions_ReturnValue_1;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVideoConfig_Mono                      K2Node_MakeStruct_VideoConfig_Mono;                // 0x0010(0x0060)()
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UActivatableMovieWidget_Monolithic_Native_C* CallFunc_Create_ReturnValue;                       // 0x0078(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LoadStreamingVideo_bNoAutoPlay;           // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeScreen_C_PlayHolidayCinematic) == 0x000008, "Wrong alignment on ChallengeScreen_C_PlayHolidayCinematic");
static_assert(sizeof(ChallengeScreen_C_PlayHolidayCinematic) == 0x000088, "Wrong size on ChallengeScreen_C_PlayHolidayCinematic");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, CallFunc_GetRuntimeOptions_ReturnValue) == 0x000000, "Member 'ChallengeScreen_C_PlayHolidayCinematic::CallFunc_GetRuntimeOptions_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, CallFunc_GetRuntimeOptions_ReturnValue_1) == 0x000008, "Member 'ChallengeScreen_C_PlayHolidayCinematic::CallFunc_GetRuntimeOptions_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, K2Node_MakeStruct_VideoConfig_Mono) == 0x000010, "Member 'ChallengeScreen_C_PlayHolidayCinematic::K2Node_MakeStruct_VideoConfig_Mono' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, CallFunc_GetOwningPlayer_ReturnValue) == 0x000070, "Member 'ChallengeScreen_C_PlayHolidayCinematic::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, CallFunc_Create_ReturnValue) == 0x000078, "Member 'ChallengeScreen_C_PlayHolidayCinematic::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeScreen_C_PlayHolidayCinematic, CallFunc_LoadStreamingVideo_bNoAutoPlay) == 0x000080, "Member 'ChallengeScreen_C_PlayHolidayCinematic::CallFunc_LoadStreamingVideo_bNoAutoPlay' has a wrong offset!");

// Function ChallengeScreen.ChallengeScreen_C.HandleReplayCinematic
// 0x0001 (0x0001 - 0x0000)
struct ChallengeScreen_C_HandleReplayCinematic final
{
public:
	bool                                          PassThrough;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeScreen_C_HandleReplayCinematic) == 0x000001, "Wrong alignment on ChallengeScreen_C_HandleReplayCinematic");
static_assert(sizeof(ChallengeScreen_C_HandleReplayCinematic) == 0x000001, "Wrong size on ChallengeScreen_C_HandleReplayCinematic");
static_assert(offsetof(ChallengeScreen_C_HandleReplayCinematic, PassThrough) == 0x000000, "Member 'ChallengeScreen_C_HandleReplayCinematic::PassThrough' has a wrong offset!");

}

