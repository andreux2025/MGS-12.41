#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLinkComponents

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "LiveLinkInterface_structs.hpp"
#include "LiveLinkComponents_structs.hpp"


namespace SDK
{

// Class LiveLinkComponents.LiveLinkControllerBase
// 0x0000 (0x0028 - 0x0028)
class ULiveLinkControllerBase : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkControllerBase">();
	}
	static class ULiveLinkControllerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkControllerBase>();
	}
};
static_assert(alignof(ULiveLinkControllerBase) == 0x000008, "Wrong alignment on ULiveLinkControllerBase");
static_assert(sizeof(ULiveLinkControllerBase) == 0x000028, "Wrong size on ULiveLinkControllerBase");

// Class LiveLinkComponents.LiveLinkCameraController
// 0x0030 (0x0058 - 0x0028)
class ULiveLinkCameraController final : public ULiveLinkControllerBase
{
public:
	struct FComponentReference                    ComponentToControl;                                // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FLiveLinkTransformControllerData       TransformData;                                     // 0x0050(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkCameraController">();
	}
	static class ULiveLinkCameraController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkCameraController>();
	}
};
static_assert(alignof(ULiveLinkCameraController) == 0x000008, "Wrong alignment on ULiveLinkCameraController");
static_assert(sizeof(ULiveLinkCameraController) == 0x000058, "Wrong size on ULiveLinkCameraController");
static_assert(offsetof(ULiveLinkCameraController, ComponentToControl) == 0x000028, "Member 'ULiveLinkCameraController::ComponentToControl' has a wrong offset!");
static_assert(offsetof(ULiveLinkCameraController, TransformData) == 0x000050, "Member 'ULiveLinkCameraController::TransformData' has a wrong offset!");

// Class LiveLinkComponents.LiveLinkComponentController
// 0x0038 (0x00E8 - 0x00B0)
class ULiveLinkComponentController final : public UActorComponent
{
public:
	struct FLiveLinkSubjectRepresentation         SubjectRepresentation;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class ULiveLinkControllerBase*                Controller;                                        // 0x00C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateInEditor;                                   // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnLiveLinkUpdated;                                 // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkComponentController">();
	}
	static class ULiveLinkComponentController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkComponentController>();
	}
};
static_assert(alignof(ULiveLinkComponentController) == 0x000008, "Wrong alignment on ULiveLinkComponentController");
static_assert(sizeof(ULiveLinkComponentController) == 0x0000E8, "Wrong size on ULiveLinkComponentController");
static_assert(offsetof(ULiveLinkComponentController, SubjectRepresentation) == 0x0000B0, "Member 'ULiveLinkComponentController::SubjectRepresentation' has a wrong offset!");
static_assert(offsetof(ULiveLinkComponentController, Controller) == 0x0000C0, "Member 'ULiveLinkComponentController::Controller' has a wrong offset!");
static_assert(offsetof(ULiveLinkComponentController, bUpdateInEditor) == 0x0000C8, "Member 'ULiveLinkComponentController::bUpdateInEditor' has a wrong offset!");
static_assert(offsetof(ULiveLinkComponentController, OnLiveLinkUpdated) == 0x0000D0, "Member 'ULiveLinkComponentController::OnLiveLinkUpdated' has a wrong offset!");

// Class LiveLinkComponents.LiveLinkLightController
// 0x0030 (0x0058 - 0x0028)
class ULiveLinkLightController final : public ULiveLinkControllerBase
{
public:
	struct FComponentReference                    ComponentToControl;                                // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FLiveLinkTransformControllerData       TransformData;                                     // 0x0050(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkLightController">();
	}
	static class ULiveLinkLightController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkLightController>();
	}
};
static_assert(alignof(ULiveLinkLightController) == 0x000008, "Wrong alignment on ULiveLinkLightController");
static_assert(sizeof(ULiveLinkLightController) == 0x000058, "Wrong size on ULiveLinkLightController");
static_assert(offsetof(ULiveLinkLightController, ComponentToControl) == 0x000028, "Member 'ULiveLinkLightController::ComponentToControl' has a wrong offset!");
static_assert(offsetof(ULiveLinkLightController, TransformData) == 0x000050, "Member 'ULiveLinkLightController::TransformData' has a wrong offset!");

// Class LiveLinkComponents.LiveLinkTransformController
// 0x0030 (0x0058 - 0x0028)
class ULiveLinkTransformController final : public ULiveLinkControllerBase
{
public:
	struct FComponentReference                    ComponentToControl;                                // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FLiveLinkTransformControllerData       TransformData;                                     // 0x0050(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkTransformController">();
	}
	static class ULiveLinkTransformController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkTransformController>();
	}
};
static_assert(alignof(ULiveLinkTransformController) == 0x000008, "Wrong alignment on ULiveLinkTransformController");
static_assert(sizeof(ULiveLinkTransformController) == 0x000058, "Wrong size on ULiveLinkTransformController");
static_assert(offsetof(ULiveLinkTransformController, ComponentToControl) == 0x000028, "Member 'ULiveLinkTransformController::ComponentToControl' has a wrong offset!");
static_assert(offsetof(ULiveLinkTransformController, TransformData) == 0x000050, "Member 'ULiveLinkTransformController::TransformData' has a wrong offset!");

}

