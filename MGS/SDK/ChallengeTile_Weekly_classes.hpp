#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeTile_Weekly

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChallengeTile_Weekly.ChallengeTile_Weekly_C
// 0x0060 (0x0C18 - 0x0BB8)
class UChallengeTile_Weekly_C final : public UAthenaChallengeSetTile_Weekly
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0BB8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AmbientPartyAssistAttention;                       // 0x0BC0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Outro;                                             // 0x0BC8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       OnHover;                                           // 0x0BD0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 ImageBackground;                                   // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageCompletionBackground;                         // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageLockIcon;                                     // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                LockedMessageSpacer;                               // 0x0BF0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               OverlayPartyAssist;                                // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        SwitcherBackground;                                // 0x0C00(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonWidgetSwitcher*                  SwitcherProgressInfo;                              // 0x0C08(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpacer*                                TextSpacer;                                        // 0x0C10(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ChallengeTile_Weekly(int32 EntryPoint);
	void OnContainsPartyAssistedChallengeChanged(bool bHasPartyAssistedChallenge);
	void BP_OnUnhovered();
	void BP_OnHovered();
	void OnChallengeSetEstablished(const struct FFortChallengeSetStyle& DisplayStyle, bool bIsComplete, bool bIsLocked);
	void SetDynamicColors(class UImage* WeeklyDynamicMaterialTarget, const struct FFortChallengeSetStyle& FortChallengeSetStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChallengeTile_Weekly_C">();
	}
	static class UChallengeTile_Weekly_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeTile_Weekly_C>();
	}
};
static_assert(alignof(UChallengeTile_Weekly_C) == 0x000008, "Wrong alignment on UChallengeTile_Weekly_C");
static_assert(sizeof(UChallengeTile_Weekly_C) == 0x000C18, "Wrong size on UChallengeTile_Weekly_C");
static_assert(offsetof(UChallengeTile_Weekly_C, UberGraphFrame) == 0x000BB8, "Member 'UChallengeTile_Weekly_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, AmbientPartyAssistAttention) == 0x000BC0, "Member 'UChallengeTile_Weekly_C::AmbientPartyAssistAttention' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, Outro) == 0x000BC8, "Member 'UChallengeTile_Weekly_C::Outro' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, OnHover) == 0x000BD0, "Member 'UChallengeTile_Weekly_C::OnHover' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, ImageBackground) == 0x000BD8, "Member 'UChallengeTile_Weekly_C::ImageBackground' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, ImageCompletionBackground) == 0x000BE0, "Member 'UChallengeTile_Weekly_C::ImageCompletionBackground' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, ImageLockIcon) == 0x000BE8, "Member 'UChallengeTile_Weekly_C::ImageLockIcon' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, LockedMessageSpacer) == 0x000BF0, "Member 'UChallengeTile_Weekly_C::LockedMessageSpacer' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, OverlayPartyAssist) == 0x000BF8, "Member 'UChallengeTile_Weekly_C::OverlayPartyAssist' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, SwitcherBackground) == 0x000C00, "Member 'UChallengeTile_Weekly_C::SwitcherBackground' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, SwitcherProgressInfo) == 0x000C08, "Member 'UChallengeTile_Weekly_C::SwitcherProgressInfo' has a wrong offset!");
static_assert(offsetof(UChallengeTile_Weekly_C, TextSpacer) == 0x000C10, "Member 'UChallengeTile_Weekly_C::TextSpacer' has a wrong offset!");

}

