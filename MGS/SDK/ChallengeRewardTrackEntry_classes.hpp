#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeRewardTrackEntry

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ChallengeRewardTrackEntry.ChallengeRewardTrackEntry_C
// 0x0068 (0x0328 - 0x02C0)
class UChallengeRewardTrackEntry_C final : public UAthenaChallengeRewardTrackEntry
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       NextObjective;                                     // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Completed_CurrentNode_Last;                        // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Completed_NextNode;                                // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Completed_CurrentNode;                             // 0x02E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UImage*                                 FinishGlow;                                        // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_Pip;                                         // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortLazyImage*                         LazyImage_Reward;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 NextRewardIndicator;                               // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TriBurst_1;                                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TriBurst_2;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 TriBurst_3;                                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     NewVar_0;                                          // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ChallengeRewardTrackEntry(int32 EntryPoint);
	void SetLastNodeInTrack(bool bIsLast);
	void StyleChange(bool bViewingPrestige);
	void ClearPreviewSelection();
	void SetAsCurrentPreviewItem();
	void CompletedCurrentNode(bool bAnimate, bool LastReward);
	void SetToDefaultState();
	void CompletedNextNode(bool bAnimate);
	void NextRewardToEarn(bool bNext);
	void Construct();
	void SetIsPrestige(class UImage* MaterialBrush, bool ViewingPrestige);
	void SetIsInactive(class UImage* MaterialBrush, bool IsInactive);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ChallengeRewardTrackEntry_C">();
	}
	static class UChallengeRewardTrackEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeRewardTrackEntry_C>();
	}
};
static_assert(alignof(UChallengeRewardTrackEntry_C) == 0x000008, "Wrong alignment on UChallengeRewardTrackEntry_C");
static_assert(sizeof(UChallengeRewardTrackEntry_C) == 0x000328, "Wrong size on UChallengeRewardTrackEntry_C");
static_assert(offsetof(UChallengeRewardTrackEntry_C, UberGraphFrame) == 0x0002C0, "Member 'UChallengeRewardTrackEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, NextObjective) == 0x0002C8, "Member 'UChallengeRewardTrackEntry_C::NextObjective' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, Completed_CurrentNode_Last) == 0x0002D0, "Member 'UChallengeRewardTrackEntry_C::Completed_CurrentNode_Last' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, Completed_NextNode) == 0x0002D8, "Member 'UChallengeRewardTrackEntry_C::Completed_NextNode' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, Completed_CurrentNode) == 0x0002E0, "Member 'UChallengeRewardTrackEntry_C::Completed_CurrentNode' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, FinishGlow) == 0x0002E8, "Member 'UChallengeRewardTrackEntry_C::FinishGlow' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, Image_Pip) == 0x0002F0, "Member 'UChallengeRewardTrackEntry_C::Image_Pip' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, LazyImage_Reward) == 0x0002F8, "Member 'UChallengeRewardTrackEntry_C::LazyImage_Reward' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, NextRewardIndicator) == 0x000300, "Member 'UChallengeRewardTrackEntry_C::NextRewardIndicator' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, TriBurst_1) == 0x000308, "Member 'UChallengeRewardTrackEntry_C::TriBurst_1' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, TriBurst_2) == 0x000310, "Member 'UChallengeRewardTrackEntry_C::TriBurst_2' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, TriBurst_3) == 0x000318, "Member 'UChallengeRewardTrackEntry_C::TriBurst_3' has a wrong offset!");
static_assert(offsetof(UChallengeRewardTrackEntry_C, NewVar_0) == 0x000320, "Member 'UChallengeRewardTrackEntry_C::NewVar_0' has a wrong offset!");

}

