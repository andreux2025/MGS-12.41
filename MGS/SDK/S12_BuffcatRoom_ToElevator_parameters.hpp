#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S12_BuffcatRoom_ToElevator

#include "Basic.hpp"


namespace SDK::Params
{

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x00C8 (0x00C8 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_7;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_6;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_5;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3_5;      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3_4;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_4;       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_3;       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3_3;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3_2;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3_1;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition3;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_2; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench; // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_CustomEvent_Sound;                          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_2;       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition_1;       // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Elevator_Transition_C*              K2Node_CustomEvent_BP_Elevator_Transition;         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_TNTINA; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue_1;                 // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Meowscles; // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue_2;                 // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Battlepass_LightSwitcher_C*         K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsReversed_ReturnValue_3;                 // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x0000C8, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue) == 0x000004, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_7) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_6) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_5) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3_5) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3_4) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_4) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_3) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3_3) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3_2) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3_1) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition3) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_2) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Sound) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Sound' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_2) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition_1) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Elevator_Transition) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Elevator_Transition' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_TNTINA) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_TNTINA' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue_1) == 0x0000A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Meowscles) == 0x0000A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Meowscles' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue_2) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, CallFunc_IsReversed_ReturnValue_3) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::CallFunc_IsReversed_ReturnValue_3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_2::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_Meowscles_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Meowscles;             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0, BP_Battlepass_LightSwitcher_Meowscles) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Meowscles_Event_0::BP_Battlepass_LightSwitcher_Meowscles' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_1::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_TNTINA_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_TNTINA;                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0, BP_Battlepass_LightSwitcher_TNTINA) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_TNTINA_Event_0::BP_Battlepass_LightSwitcher_TNTINA' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_7 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_7) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_7");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_7) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_7");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_7, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_7::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_6 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_6) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_6");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_6) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_6");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_6, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_6::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_5 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_5");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_5) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_5");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_5, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_5::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.Audio Camera Move Event
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_Audio_Camera_Move_Event final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_Audio_Camera_Move_Event) == 0x000008, "Wrong alignment on SequenceDirector_C_Audio_Camera_Move_Event");
static_assert(sizeof(SequenceDirector_C_Audio_Camera_Move_Event) == 0x000008, "Wrong size on SequenceDirector_C_Audio_Camera_Move_Event");
static_assert(offsetof(SequenceDirector_C_Audio_Camera_Move_Event, Sound) == 0x000000, "Member 'SequenceDirector_C_Audio_Camera_Move_Event::Sound' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_Hench_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Hench;                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0, BP_Battlepass_LightSwitcher_Hench) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Hench_Event_0::BP_Battlepass_LightSwitcher_Hench' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Battlepass_LightSwitcher_Maproom_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_BP_Battlepass_LightSwitcher_Maproom_Event_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_5 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_5");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_5) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_5");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_5, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_5::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_4 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_4");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_4");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_4, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_4::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_3 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_3");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_3");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_3, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_3::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_2 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_2, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_2::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_4 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_4");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_4) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_4");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_4, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_4::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_3 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_3");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_3) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_3");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_3, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_3::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_1 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_1, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_1::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition3_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition3_Event_0 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition3;                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition3_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition3_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition3_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition3_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition3_Event_0, BP_Elevator_Transition3) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition3_Event_0::BP_Elevator_Transition3' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_2 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_2");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_2) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_2");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_2, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_2::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_1 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_1");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_1");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_1, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_1::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.BP_Elevator_Transition_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_Elevator_Transition_Event_0 final
{
public:
	class ABP_Elevator_Transition_C*              BP_Elevator_Transition;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_Elevator_Transition_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_Elevator_Transition_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_Elevator_Transition_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_Elevator_Transition_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_Elevator_Transition_Event_0, BP_Elevator_Transition) == 0x000000, "Member 'SequenceDirector_C_BP_Elevator_Transition_Event_0::BP_Elevator_Transition' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Maproom;               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_Battlepass_LightSwitcher_Maproom) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_Battlepass_LightSwitcher_Maproom' has a wrong offset!");

// Function S12_BuffcatRoom_ToElevator.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_Battlepass_LightSwitcher_C*         BP_Battlepass_LightSwitcher_Meowscles;             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_Battlepass_LightSwitcher_Meowscles) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_Battlepass_LightSwitcher_Meowscles' has a wrong offset!");

}

