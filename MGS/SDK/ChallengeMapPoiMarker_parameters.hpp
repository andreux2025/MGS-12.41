#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeMapPoiMarker

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function ChallengeMapPoiMarker.ChallengeMapPoiMarker_C.ExecuteUbergraph_ChallengeMapPoiMarker
// 0x00B0 (0x00B0 - 0x0000)
struct ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsRedacted;                          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_bIsSpybase;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_Select_Default_1;                           // 0x0010(0x0050)(HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x0060(0x0028)()
	struct FSlateColor                            K2Node_Select_Default_3;                           // 0x0088(0x0028)()
};
static_assert(alignof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker) == 0x000008, "Wrong alignment on ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker");
static_assert(sizeof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker) == 0x0000B0, "Wrong size on ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, EntryPoint) == 0x000000, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_bool_Variable) == 0x000004, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_byte_Variable) == 0x000005, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_byte_Variable_1) == 0x000006, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_bool_Variable_1) == 0x000007, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Event_IsDesignTime) == 0x000008, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Event_bIsRedacted) == 0x000009, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Event_bIsRedacted' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Event_bIsSpybase) == 0x00000A, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Event_bIsSpybase' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Select_Default) == 0x00000C, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_bool_Variable_2) == 0x00000D, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, Temp_bool_Variable_3) == 0x00000E, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Select_Default_1) == 0x000010, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Select_Default_2) == 0x000060, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker, K2Node_Select_Default_3) == 0x000088, "Member 'ChallengeMapPoiMarker_C_ExecuteUbergraph_ChallengeMapPoiMarker::K2Node_Select_Default_3' has a wrong offset!");

// Function ChallengeMapPoiMarker.ChallengeMapPoiMarker_C.HandleTextChanged
// 0x0002 (0x0002 - 0x0000)
struct ChallengeMapPoiMarker_C_HandleTextChanged final
{
public:
	bool                                          bIsRedacted;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bIsSpybase;                                        // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeMapPoiMarker_C_HandleTextChanged) == 0x000001, "Wrong alignment on ChallengeMapPoiMarker_C_HandleTextChanged");
static_assert(sizeof(ChallengeMapPoiMarker_C_HandleTextChanged) == 0x000002, "Wrong size on ChallengeMapPoiMarker_C_HandleTextChanged");
static_assert(offsetof(ChallengeMapPoiMarker_C_HandleTextChanged, bIsRedacted) == 0x000000, "Member 'ChallengeMapPoiMarker_C_HandleTextChanged::bIsRedacted' has a wrong offset!");
static_assert(offsetof(ChallengeMapPoiMarker_C_HandleTextChanged, bIsSpybase) == 0x000001, "Member 'ChallengeMapPoiMarker_C_HandleTextChanged::bIsSpybase' has a wrong offset!");

// Function ChallengeMapPoiMarker.ChallengeMapPoiMarker_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengeMapPoiMarker_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeMapPoiMarker_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengeMapPoiMarker_C_PreConstruct");
static_assert(sizeof(ChallengeMapPoiMarker_C_PreConstruct) == 0x000001, "Wrong size on ChallengeMapPoiMarker_C_PreConstruct");
static_assert(offsetof(ChallengeMapPoiMarker_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengeMapPoiMarker_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

