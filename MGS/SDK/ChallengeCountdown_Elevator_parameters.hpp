#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeCountdown_Elevator

#include "Basic.hpp"

#include "FortniteUI_structs.hpp"


namespace SDK::Params
{

// Function ChallengeCountdown_Elevator.ChallengeCountdown_Elevator_C.ExecuteUbergraph_ChallengeCountdown_Elevator
// 0x0048 (0x0048 - 0x0000)
struct ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerDisplayData                      K2Node_Event_DisplayStyle;                         // 0x0008(0x0038)(ConstParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator) == 0x000008, "Wrong alignment on ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator");
static_assert(sizeof(ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator) == 0x000048, "Wrong size on ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator");
static_assert(offsetof(ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator, EntryPoint) == 0x000000, "Member 'ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator, K2Node_Event_DisplayStyle) == 0x000008, "Member 'ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator::K2Node_Event_DisplayStyle' has a wrong offset!");
static_assert(offsetof(ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator, K2Node_Event_IsDesignTime) == 0x000040, "Member 'ChallengeCountdown_Elevator_C_ExecuteUbergraph_ChallengeCountdown_Elevator::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function ChallengeCountdown_Elevator.ChallengeCountdown_Elevator_C.OnChallengeSet
// 0x0038 (0x0038 - 0x0000)
struct ChallengeCountdown_Elevator_C_OnChallengeSet final
{
public:
	struct FTimerDisplayData                      DisplayStyle;                                      // 0x0000(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(ChallengeCountdown_Elevator_C_OnChallengeSet) == 0x000008, "Wrong alignment on ChallengeCountdown_Elevator_C_OnChallengeSet");
static_assert(sizeof(ChallengeCountdown_Elevator_C_OnChallengeSet) == 0x000038, "Wrong size on ChallengeCountdown_Elevator_C_OnChallengeSet");
static_assert(offsetof(ChallengeCountdown_Elevator_C_OnChallengeSet, DisplayStyle) == 0x000000, "Member 'ChallengeCountdown_Elevator_C_OnChallengeSet::DisplayStyle' has a wrong offset!");

// Function ChallengeCountdown_Elevator.ChallengeCountdown_Elevator_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengeCountdown_Elevator_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeCountdown_Elevator_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengeCountdown_Elevator_C_PreConstruct");
static_assert(sizeof(ChallengeCountdown_Elevator_C_PreConstruct) == 0x000001, "Wrong size on ChallengeCountdown_Elevator_C_PreConstruct");
static_assert(offsetof(ChallengeCountdown_Elevator_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengeCountdown_Elevator_C_PreConstruct::IsDesignTime' has a wrong offset!");

}

