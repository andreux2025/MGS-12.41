#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DailyChallengeStickyNoteWidget

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Engine_structs.hpp"
#include "FortniteUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass DailyChallengeStickyNoteWidget.DailyChallengeStickyNoteWidget_C
// 0x0020 (0x0348 - 0x0328)
class UDailyChallengeStickyNoteWidget_C final : public UFortDailyChallengeStickyNoteWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOverlay*                               ActiveChallenge;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Complete;                                          // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        Switcher_RerollAndNextChallengeTime;               // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_DailyChallengeStickyNoteWidget(int32 EntryPoint);
	void OnHasChallengeUpdated(bool bHasAssignedChallenge);
	void OnReplaceConfirmationClosed(bool bAcceptedReroll);
	void HandleHasChallengeUpdated(bool bHasChallenge);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"DailyChallengeStickyNoteWidget_C">();
	}
	static class UDailyChallengeStickyNoteWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyChallengeStickyNoteWidget_C>();
	}
};
static_assert(alignof(UDailyChallengeStickyNoteWidget_C) == 0x000008, "Wrong alignment on UDailyChallengeStickyNoteWidget_C");
static_assert(sizeof(UDailyChallengeStickyNoteWidget_C) == 0x000348, "Wrong size on UDailyChallengeStickyNoteWidget_C");
static_assert(offsetof(UDailyChallengeStickyNoteWidget_C, UberGraphFrame) == 0x000328, "Member 'UDailyChallengeStickyNoteWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UDailyChallengeStickyNoteWidget_C, ActiveChallenge) == 0x000330, "Member 'UDailyChallengeStickyNoteWidget_C::ActiveChallenge' has a wrong offset!");
static_assert(offsetof(UDailyChallengeStickyNoteWidget_C, Complete) == 0x000338, "Member 'UDailyChallengeStickyNoteWidget_C::Complete' has a wrong offset!");
static_assert(offsetof(UDailyChallengeStickyNoteWidget_C, Switcher_RerollAndNextChallengeTime) == 0x000340, "Member 'UDailyChallengeStickyNoteWidget_C::Switcher_RerollAndNextChallengeTime' has a wrong offset!");

}

